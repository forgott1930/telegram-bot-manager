import logging
import json
import os
import asyncio
import threading
import signal
import sys
import re
import io
import time
from datetime import datetime, timedelta
from typing import Dict, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from telegram.error import Forbidden, BadRequest
from database import BotDatabase
from broadcast_workers import OptimizedBroadcast

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MAIN_BOT_TOKEN = "YOUR_MAIN_BOT_TOKEN_HERE"  # –¢–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
ADMIN_ID = 123456789  # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "bots_data.json"
ADMINS_FILE = "admins.json"
USERS_FILE = "users.json"  # –ù–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏ –∏—Ö –ø–æ—Ç–æ–∫–æ–≤
# –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
active_bot_instances = {}  # –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
bot_threads = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# –§–æ—Ä–º–∞—Ç: {message_id: {'user_id': user_id, 'bot_id': bot_id}}
# –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
forwarded_messages = {}
MAX_FORWARDED_MESSAGES = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

class BotManager:
    def __init__(self):
        self.ensure_files_exist()
        self.data = self.load_data()
        self.clean_invalid_bots()  # –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        self.admins = self.load_admins()
        self.users = self.load_users()
    
    def clean_invalid_bots(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –±–æ—Ç–æ–≤"""
        invalid_bots = []
        for bot_id, bot_data in self.data.get("bots", {}).items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID
            if bot_id == "bot" or not bot_id:
                invalid_bots.append(bot_id)
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–æ—Ç —Å ID '{bot_id}', —É–¥–∞–ª—è—é...")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è (–∫—Ä–æ–º–µ main)
            if bot_id != "main":
                if not bot_data.get("token"):
                    invalid_bots.append(bot_id)
                    logger.warning(f"–ë–æ—Ç {bot_id} –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–∫–µ–Ω–∞, —É–¥–∞–ª—è—é...")
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        for bot_id in invalid_bots:
            if bot_id in self.data["bots"]:
                del self.data["bots"][bot_id]
                logger.info(f"–£–¥–∞–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–æ—Ç: {bot_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if invalid_bots:
            self.save_data()
            logger.info(f"–û—á–∏—â–µ–Ω–æ {len(invalid_bots)} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –±–æ—Ç–æ–≤")
    
    def ensure_files_exist(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists(DATA_FILE):
            default_data = {
                "bots": {
                    "main": {
                        "name": "–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)",
                        "token": MAIN_BOT_TOKEN,
                        "status": "running",
                        "start_text": """üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –±—É–∫–µ—Ç–æ–≤!* üå∏

üìÇ *–ö–∞—Ç–∞–ª–æ–≥–∏ –±—É–∫–µ—Ç–æ–≤:*
‚Ä¢ [–î–æ 6000 —Ä—É–±–ª–µ–π](https://t.me/buketi_do_6000)
‚Ä¢ [–î–æ 10000 —Ä—É–±–ª–µ–π](https://t.me/buketi_do_10000)
‚Ä¢ [–î–æ 15000 —Ä—É–±–ª–µ–π](https://t.me/buketi_do_15000)

üí¨ –î–ª—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–∞—Ç–∞–ª–æ–≥!

_–ö—Ä–∞—Å–∏–≤—ã–µ –±—É–∫–µ—Ç—ã –¥–ª—è –æ—Å–æ–±–µ–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤_ ‚ú®"""
                    }
                }
            }
            try:
                with open(DATA_FILE, 'w', encoding='utf-8') as f:
                    json.dump(default_data, f, ensure_ascii=False, indent=2)
                logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {DATA_FILE} —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {DATA_FILE}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists(ADMINS_FILE):
            try:
                with open(ADMINS_FILE, 'w') as f:
                    json.dump([ADMIN_ID], f)
                logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {ADMINS_FILE} —Å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {ADMINS_FILE}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        running_bots_file = "running_bots.json"
        if not os.path.exists(running_bots_file):
            try:
                with open(running_bots_file, 'w') as f:
                    json.dump([], f)
                logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {running_bots_file}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {running_bots_file}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists(USERS_FILE):
            try:
                with open(USERS_FILE, 'w', encoding='utf-8') as f:
                    json.dump({}, f)
                logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {USERS_FILE}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {USERS_FILE}: {e}")
    
    def load_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(DATA_FILE):
            try:
                with open(DATA_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "bots": {
                "main": {
                    "name": "–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)",
                    "token": MAIN_BOT_TOKEN,
                    "status": "running",
                    "start_text": """üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –±—É–∫–µ—Ç–æ–≤!* üå∏

üìÇ *–ö–∞—Ç–∞–ª–æ–≥–∏ –±—É–∫–µ—Ç–æ–≤:*
‚Ä¢ [–î–æ 6000 —Ä—É–±–ª–µ–π](https://t.me/buketi_do_6000)
‚Ä¢ [–î–æ 10000 —Ä—É–±–ª–µ–π](https://t.me/buketi_do_10000)
‚Ä¢ [–î–æ 15000 —Ä—É–±–ª–µ–π](https://t.me/buketi_do_15000)

üí¨ –î–ª—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–∞—Ç–∞–ª–æ–≥!

_–ö—Ä–∞—Å–∏–≤—ã–µ –±—É–∫–µ—Ç—ã –¥–ª—è –æ—Å–æ–±–µ–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤_ ‚ú®"""
                }
            }
        }
    
    def load_admins(self) -> List[int]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤"""
        if os.path.exists(ADMINS_FILE):
            try:
                with open(ADMINS_FILE, 'r') as f:
                    admins = json.load(f)
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–¥–º–∏–Ω—ã: {admins}")
                    return admins
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–º–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {ADMIN_ID}")
        return [ADMIN_ID]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
    
    def load_users(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if os.path.exists(USERS_FILE):
            try:
                with open(USERS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}
    
    def save_users(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with open(USERS_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.users, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def add_user(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        return db.add_user(user_id, 'main', username, first_name, last_name)
    
    def get_all_users(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return [str(uid) for uid in db.get_all_active_users()]
    
    def save_admins(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤"""
        try:
            with open(ADMINS_FILE, 'w') as f:
                json.dump(self.admins, f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")
    
    def add_admin(self, user_id: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        if user_id not in self.admins:
            self.admins.append(user_id)
            self.save_admins()
            return True
        return False
    
    def remove_admin(self, user_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
        if user_id in self.admins and user_id != ADMIN_ID:
            self.admins.remove(user_id)
            self.save_admins()
            return True
        return False
    
    def get_admins_list(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤"""
        return self.admins
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_bot_text(self, bot_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞"""
        return self.data["bots"].get(bot_id, {}).get("start_text", "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def set_bot_text(self, bot_id: str, text: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞"""
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö bot_id
        if not bot_id or bot_id == "bot":
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ bot_id: '{bot_id}'")
            return
        
        if bot_id not in self.data["bots"]:
            logger.warning(f"–ë–æ—Ç {bot_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")
            self.data["bots"][bot_id] = {"name": f"–ë–æ—Ç {bot_id}"}
        self.data["bots"][bot_id]["start_text"] = text
        self.save_data()
    
    def add_bot(self, bot_id: str, name: str, token: str, username: str = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        self.data["bots"][bot_id] = {
            "name": name,
            "token": token,
            "username": username,
            "status": "stopped",
            "start_text": f"ü§ñ *{name}*\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–µ–∫—Å—Ç –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        }
        self.save_data()
    
    def delete_bot(self, bot_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞"""
        if bot_id in self.data["bots"] and bot_id != "main":
            del self.data["bots"][bot_id]
            self.save_data()
            return True
        return False
    
    def get_bots_list(self) -> List[tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤"""
        return [(bot_id, bot_data["name"], bot_data.get("status", "stopped")) 
                for bot_id, bot_data in self.data["bots"].items()]
    
    def get_bot_token(self, bot_id: str) -> str:
        logger.info(f"\n\n\n\n\n\n\n\nget_bot_token: bot_id={bot_id}, available_bots={list(self.data['bots'].keys())}")
        return self.data["bots"].get(bot_id, {}).get("token", "")
        
    def set_bot_status(self, bot_id: str, status: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        if bot_id in self.data["bots"]:
            self.data["bots"][bot_id]["status"] = status
            self.save_data()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot_manager = BotManager()
db = BotDatabase()

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞—Ö
logger.info(f"–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ê–¥–º–∏–Ω—ã: {bot_manager.admins}")

# –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if os.path.exists(USERS_FILE):
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            old_users = json.load(f)
            if old_users:
                db.migrate_from_json(old_users)
                logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Markdown"""
    if not text:
        return text
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown V2
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, '\\' + char)
    return text

def markdown_to_html(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ HTML –¥–ª—è Telegram"""
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω
    replacements = {}
    replacement_counter = 0
    
    def create_placeholder():
        nonlocal replacement_counter
        placeholder = f"¬ß¬ß¬ßPLACEHOLDER{replacement_counter}¬ß¬ß¬ß"
        replacement_counter += 1
        return placeholder
    
    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ (—Ç—Ä–æ–π–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏)
    code_blocks = re.findall(r'```([^`]+)```', text)
    for code in code_blocks:
        placeholder = create_placeholder()
        replacements[placeholder] = f'<pre>{code}</pre>'
        text = text.replace(f'```{code}```', placeholder, 1)
    
    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–æ–¥ (–æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏)
    inline_codes = re.findall(r'`([^`]+)`', text)
    for code in inline_codes:
        placeholder = create_placeholder()
        replacements[placeholder] = f'<code>{code}</code>'
        text = text.replace(f'`{code}`', placeholder, 1)
    
    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏
    link_pattern = r'\[([^\]]+)\]\(([^\)]+)\)'
    
    def process_link(match):
        link_text = match.group(1)
        url = match.group(2)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ —Å—Å—ã–ª–∫–∏
        link_text_html = link_text
        link_text_html = re.sub(r'\*\*([^\*]+)\*\*', r'<b>\1</b>', link_text_html)
        link_text_html = re.sub(r'\*([^\*]+)\*', r'<b>\1</b>', link_text_html)
        link_text_html = re.sub(r'_([^_]+)_', r'<i>\1</i>', link_text_html)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not url.startswith(('http://', 'https://', 'tg://', 'tme://')):
            if url.startswith('www.'):
                url = 'https://' + url
            elif not url.startswith('/'):
                url = 'https://' + url
        
        placeholder = create_placeholder()
        replacements[placeholder] = f'<a href="{url}">{link_text_html}</a>'
        return placeholder
    
    text = re.sub(link_pattern, process_link, text)
    
    # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
    
    # –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç (–¥–≤–æ–π–Ω–æ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)
    text = re.sub(r'__([^_]+)__', r'<u>\1</u>', text)
    
    # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Å ** (–¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
    text = re.sub(r'\*\*([^\*]+)\*\*', r'<b>\1</b>', text)
    
    # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Å *
    text = re.sub(r'\*([^\*]+)\*', r'<b>\1</b>', text)
    
    # –ö—É—Ä—Å–∏–≤
    text = re.sub(r'_([^_]+)_', r'<i>\1</i>', text)
    
    # –ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub(r'~([^~]+)~', r'<s>\1</s>', text)
    
    # 5. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    for placeholder, replacement in replacements.items():
        text = text.replace(placeholder, replacement)
    
    return text

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞"""
    return user_id in bot_manager.admins

def save_running_bots():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤"""
    running_bots_file = "running_bots.json"
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        running_bot_ids = list(active_bot_instances.keys())
        with open(running_bots_file, 'w') as f:
            json.dump(running_bot_ids, f)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã: {running_bot_ids}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö –±–æ—Ç–æ–≤
async def create_child_bot_start_handler(bot_id: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –±–æ—Ç–∞"""
    async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
        try:
            db.add_user(
                user.id,
                bot_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞, –∞ –Ω–µ 'main'
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        
        start_text = bot_manager.get_bot_text(bot_id)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Markdown –≤ HTML
        try:
            html_text = markdown_to_html(start_text)
            await update.message.reply_text(
                html_text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å HTML –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            try:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Markdown
                await update.message.reply_text(
                    start_text,
                    parse_mode=ParseMode.MARKDOWN_V2,
                    disable_web_page_preview=True
                )
            except Exception as e2:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e2}")
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π Markdown
                    await update.message.reply_text(
                        start_text,
                        parse_mode=ParseMode.MARKDOWN,
                        disable_web_page_preview=True
                    )
                except Exception as e3:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —Å—Ç–∞—Ä—ã–º Markdown –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e3}")
                    # –ï—Å–ª–∏ –≤—Å–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await update.message.reply_text(
                        start_text,
                        disable_web_page_preview=True
                    )
    return start_handler

async def create_child_bot_message_handler(bot_id: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –±–æ—Ç–∞"""
    async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        message = update.message
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        if message.photo and is_admin(user.id) and context.user_data.get('broadcast_step') == 'text' and context.user_data.get('broadcast_bot_id') == bot_id:
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
            caption = message.caption or ""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            context.user_data['broadcast_photo'] = photo.file_id
            context.user_data['broadcast_text'] = caption
            context.user_data['broadcast_type'] = 'photo'
            context.user_data['broadcast_step'] = 'confirm'
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
            bot_stats = db.get_bot_stats(bot_id)
            users_count = bot_stats['active']
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_data = bot_manager.data["bots"].get(bot_id, {})
            bot_name = bot_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
            
            await message.reply_photo(
                photo=photo.file_id,
                caption=f"üì¢ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–æ—Ç–æ*\n\n"
                       f"ü§ñ *–û—Ç –±–æ—Ç–∞:* {bot_name}\n"
                       f"üë• *–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                       f"üìù *–ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ:*\n{caption if caption else '(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)'}\n\n"
                       f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ:\n"
                       f"/send - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
                       f"/cancel - –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞
        if is_admin(user.id) and context.user_data.get('broadcast_step') == 'text' and context.user_data.get('broadcast_bot_id') == bot_id:
            broadcast_text = message.text
            context.user_data['broadcast_text'] = broadcast_text
            context.user_data['broadcast_type'] = 'text'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏
            context.user_data['broadcast_step'] = 'confirm'
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
            bot_stats = db.get_bot_stats(bot_id)
            users_count = bot_stats['active']
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            escaped_text = escape_markdown(broadcast_text)
            await message.reply_text(
                f"üì¢ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
                f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: *{users_count}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                f"üìù *–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:*\n{escaped_text}\n\n"
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ:\n"
                f"/send - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
                f"/cancel - –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if message.text and message.text.startswith('/'):
            # –ö–æ–º–∞–Ω–¥–∞ /broadcast –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            if message.text == '/broadcast' and is_admin(user.id):
                # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
                context.user_data['broadcast_bot_id'] = bot_id
                context.user_data['broadcast_step'] = 'text'
                
                bot_data = bot_manager.data["bots"].get(bot_id, {})
                bot_name = bot_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
                bot_stats = db.get_bot_stats(bot_id)
                users_count = bot_stats['active']
                
                await message.reply_text(
                    f"üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –±–æ—Ç–∞: {bot_name}*\n\n"
                    f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: *{users_count}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
                    f"‚Ä¢ üìù –¢–µ–∫—Å—Ç - –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                    f"‚Ä¢ üñº –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç\n\n"
                    f"–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            # –ö–æ–º–∞–Ω–¥–∞ /cancel
            elif message.text == '/cancel' and context.user_data.get('broadcast_step'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–º–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É –±–æ—Ç—É
                if context.user_data.get('broadcast_bot_id') == bot_id:
                    context.user_data.clear()
                    await message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            # –ö–æ–º–∞–Ω–¥–∞ /send –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            elif message.text == '/send' and context.user_data.get('broadcast_step') == 'confirm' and context.user_data.get('broadcast_bot_id') == bot_id:
                broadcast_text = context.user_data.get('broadcast_text')
                broadcast_type = context.user_data.get('broadcast_type', 'text')
                broadcast_photo = context.user_data.get('broadcast_photo')
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
                users = db.get_bot_users(bot_id, only_active=True)
                user_ids = [user['user_id'] if isinstance(user, dict) else user for user in users]
                
                await message.reply_text(
                    f"üì§ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞*\n\n"
                    f"üë• –û—Ç–ø—Ä–∞–≤–∫–∞ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...\n"
                    f"‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Bot –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –±–æ—Ç–∞
                child_bot_token = bot_manager.get_bot_token(bot_id)
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
                photo_bytes = None
                if broadcast_type == 'photo':
                    try:
                        logger.info(f"–°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –±–æ—Ç–µ {bot_id}")
                        file = await context.bot.get_file(broadcast_photo)
                        photo_bytes = await file.download_as_bytearray()
                        logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –±–æ—Ç–µ {bot_id}: {e}")
                        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
                        context.user_data.clear()
                        return
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏
                start_time = datetime.now()
                
                # Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                async def progress_callback(current, total):
                    if current % 50 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
                        percent = (current / total * 100) if total > 0 else 0
                        logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏: {current}/{total} ({percent:.1f}%)")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –±–æ—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ /send)
                result = await OptimizedBroadcast.send_broadcast(
                    bot_token=child_bot_token,
                    users=user_ids,
                    text=broadcast_text if broadcast_type == 'text' else None,
                    photo=photo_bytes if broadcast_type == 'photo' else None,
                    photo_caption=broadcast_text if broadcast_type == 'photo' else None,
                    parse_mode=ParseMode.HTML,
                    progress_callback=progress_callback,
                    auto_optimize=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
                    template_chat_id=ADMIN_ID  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
                for res in result['results']:
                    if res.is_blocked:
                        db.block_user(res.user_id, bot_id)
                
                context.user_data.clear()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                percent = (result['success'] / result['total'] * 100) if result['total'] > 0 else 0
                speedup = result['workers_used']
                time_saved = result['total_time'] * (speedup - 1) / speedup  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–µ
                
                await message.reply_text(
                    f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: *{result['success']}*\n"
                    f"‚ùå –û—à–∏–±–æ–∫: *{result['failed']}*\n"
                    f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: *{result['blocked']}*\n"
                    f"üìà –í—Å–µ–≥–æ: *{result['total']}*\n\n"
                    f"‚è± –í—Ä–µ–º—è: *{result['total_time']:.1f}* —Å–µ–∫\n"
                    f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: *{speedup}x* (–≤–æ—Ä–∫–µ—Ä–æ–≤: {result['workers_used']})\n"
                    f"üíæ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ~*{time_saved:.1f}* —Å–µ–∫\n"
                    f"üì® –°–∫–æ—Ä–æ—Å—Ç—å: *{result['messages_per_second']:.1f}* —Å–æ–æ–±—â/—Å–µ–∫\n\n"
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: *{percent:.1f}%*",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            else:
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞
        if is_admin(user.id) and context.user_data.get('broadcast_step') == 'text' and context.user_data.get('broadcast_bot_id') == bot_id:
            broadcast_text = message.text
            context.user_data['broadcast_text'] = broadcast_text
            context.user_data['broadcast_step'] = 'confirm'
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
            bot_stats = db.get_bot_stats(bot_id)
            users_count = bot_stats['active']
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            escaped_text = escape_markdown(broadcast_text)
            await message.reply_text(
                f"üì¢ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
                f"üìä –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: *{users_count}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                f"üìù *–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:*\n{escaped_text}\n\n"
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ:\n"
                f"/send - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
                f"/cancel - –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –ì–õ–ê–í–ù–û–ì–û –∞–¥–º–∏–Ω–∞ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user.id == ADMIN_ID and message.reply_to_message:
            reply_to_id = message.reply_to_message.message_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if reply_to_id in forwarded_messages:
                forward_info = forwarded_messages[reply_to_id]
                target_user_id = forward_info['user_id']
                target_bot_id = forward_info['bot_id']
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=f"üí¨ *–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message.text}",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    await message.reply_text(
                        f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: `{target_user_id}`)",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    
                    logger.info(f"–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω {user.id} –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} —á–µ—Ä–µ–∑ –±–æ—Ç–∞ {bot_id}")
                    return
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                    await message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –¥–æ—á–µ—Ä–Ω–µ–º –±–æ—Ç–µ
        elif is_admin(user.id) and user.id != ADMIN_ID and message.reply_to_message:
            reply_to_id = message.reply_to_message.message_id
            if reply_to_id in forwarded_messages:
                await message.reply_text(
                    "‚õî –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞, –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ
        if is_admin(user.id):
            return
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º (–Ω–∞—Å—Ç–æ—è—â–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞)
        bot_data = bot_manager.data["bots"].get(bot_id, {})
        bot_name = bot_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –ì–õ–ê–í–ù–û–ú–£ –ê–î–ú–ò–ù–£
        logger.info(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É: {ADMIN_ID}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_name = f"{user.first_name or ''} {user.last_name or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        user_username = user.username or "–Ω–µ—Ç"
        
        # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–ï–ó parse_mode
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        info_text = f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ: {bot_name}\n"
        info_text += f"Bot ID: {bot_id}\n"
        info_text += f"–û—Ç: {user_name}\n"
        info_text += f"Username: @{user_username}\n" if user.username else f"Username: {user_username}\n"
        info_text += f"User ID: {user.id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É –ë–ï–ó —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ parse_mode
            info_msg = await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=info_text
            )
            logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É {ADMIN_ID}")
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            forwarded_msg = await context.bot.forward_message(
                chat_id=ADMIN_ID,
                from_chat_id=message.chat_id,
                message_id=message.message_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –¥–ª—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
            if len(forwarded_messages) > MAX_FORWARDED_MESSAGES:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                oldest_keys = sorted(forwarded_messages.keys())[:100]
                for key in oldest_keys:
                    del forwarded_messages[key]
                logger.info(f"–û—á–∏—â–µ–Ω–æ {len(oldest_keys)} —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            forwarded_messages[forwarded_msg.message_id] = {
                'user_id': user.id,
                'bot_id': bot_id,
                'original_message_id': message.message_id,
                'timestamp': datetime.now()  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            }
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É, ID: {forwarded_msg.message_id}")
            
        except Exception as error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É {ADMIN_ID}: {error}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply_text(
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!",
            parse_mode=ParseMode.MARKDOWN
        )
    
    return message_handler

async def create_child_bot_help_handler(bot_id: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /help –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –±–æ—Ç–∞"""
    async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        bot_name = bot_manager.data["bots"][bot_id]["name"]
        help_text = f"ü§ñ *{bot_name}*\n\n–ö–æ–º–∞–Ω–¥—ã:\n‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É broadcast –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if is_admin(user.id):
            help_text += "\n\n*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:*\n‚Ä¢ `/broadcast` - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    return help_handler

async def create_child_bot_broadcast_handler(bot_id: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /broadcast –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –±–æ—Ç–∞"""
    async def broadcast_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        if not is_admin(user.id):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
        context.user_data['broadcast_bot_id'] = bot_id
        context.user_data['broadcast_step'] = 'text'
        
        bot_data = bot_manager.data["bots"].get(bot_id, {})
        bot_name = bot_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
        bot_stats = db.get_bot_stats(bot_id)
        users_count = bot_stats['active']
        
        await update.message.reply_text(
            f"üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –±–æ—Ç–∞: {bot_name}*\n\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: *{users_count}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
            f"‚Ä¢ üìù –¢–µ–∫—Å—Ç - –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            f"‚Ä¢ üñº –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç\n\n"
            f"–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel",
            parse_mode=ParseMode.MARKDOWN
        )
    
    return broadcast_handler

async def start_bot(bot_id: str, token: str):
    """–ó–∞–ø—É—Å–∫ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –±–æ—Ç–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if bot_id in active_bot_instances:
            logger.info(f"–ë–æ—Ç {bot_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏")
            return True
        
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ {bot_id}")
        
        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        await asyncio.sleep(5)
        
        # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - —Å –æ—á–∏—Å—Ç–∫–æ–π webhook
        webhook_cleared = False
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ {bot_id} —Å –æ—á–∏—Å—Ç–∫–æ–π webhook...")
            test_bot = Bot(token=token)
            bot_info = await test_bot.get_me()
            logger.info(f"–ë–æ—Ç {bot_id} –¥–æ—Å—Ç—É–ø–µ–Ω: @{bot_info.username}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å webhook
            try:
                await test_bot.delete_webhook(drop_pending_updates=True)
                logger.info(f"Webhook —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                webhook_cleared = True
            except Exception as webhook_error:
                error_str = str(webhook_error).lower()
                if "429" in error_str or "flood" in error_str or "too many requests" in error_str:
                    logger.warning(f"–õ–∏–º–∏—Ç –Ω–∞ –æ—á–∏—Å—Ç–∫—É webhook –¥–ª—è {bot_id}: {webhook_error}")
                    # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏
                    webhook_cleared = False
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook –¥–ª—è {bot_id}: {webhook_error}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
            await test_bot.close()
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
            if webhook_cleared:
                await asyncio.sleep(10)  # –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –µ—Å–ª–∏ webhook –±—ã–ª –æ—á–∏—â–µ–Ω
            else:
                await asyncio.sleep(3)   # –ú–µ–Ω—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –µ—Å–ª–∏ webhook –Ω–µ –æ—á–∏—â–∞–ª—Å—è
                
        except Exception as e:
            error_msg = str(e).lower()
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ–±—É–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–ø—ã—Ç–∫—É –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ webhook
            if "429" in error_msg or "flood" in error_msg or "too many requests" in error_msg:
                logger.warning(f"–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ –¥–ª—è –±–æ—Ç–∞ {bot_id}. –ü—Ä–æ–±—É—é –≤—Ç–æ—Ä—É—é –ø–æ–ø—ã—Ç–∫—É –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ webhook...")
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(5)
                
                # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –±–µ–∑ –≤—Å—è–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ 2: –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É {bot_id} –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫...")
                await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ - —Å—Ä–∞–∑—É –∫ —Å–æ–∑–¥–∞–Ω–∏—é Application
                    
            elif "conflict" in error_msg or "terminated by other" in error_msg:
                logger.error(f"–ë–æ—Ç {bot_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ!")
                logger.error(f"–†–µ—à–µ–Ω–∏–µ: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")
                bot_manager.set_bot_status(bot_id, "error")
                return False
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É {bot_id}: {e}")
                bot_manager.set_bot_status(bot_id, "error")
                return False
            
        app = Application.builder().token(token).build()
        
        start_handler = await create_child_bot_start_handler(bot_id)
        help_handler = await create_child_bot_help_handler(bot_id)
        broadcast_handler = await create_child_bot_broadcast_handler(bot_id)
        message_handler = await create_child_bot_message_handler(bot_id)
        
        app.add_handler(CommandHandler("start", start_handler))
        app.add_handler(CommandHandler("help", help_handler))
        app.add_handler(CommandHandler("broadcast", broadcast_handler))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        async def send_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if context.user_data.get('broadcast_step') == 'confirm' and context.user_data.get('broadcast_bot_id') == bot_id:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
                broadcast_text = context.user_data.get('broadcast_text')
                broadcast_type = context.user_data.get('broadcast_type', 'text')
                broadcast_photo = context.user_data.get('broadcast_photo')
                users = db.get_bot_users(bot_id, only_active=True)
                
                await update.message.reply_text(
                    f"üì§ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞*\n\n"
                    f"üë• –û—Ç–ø—Ä–∞–≤–∫–∞ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                success_count = 0
                failed_count = 0
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Bot –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –±–æ—Ç–∞
                child_bot = Bot(token=token)
                
                # –î–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –±–æ—Ç–æ–≤ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª
                photo_data = None
                if broadcast_type == 'photo':
                    try:
                        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞ (–∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ)
                        logger.info(f"–°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /send –≤ –±–æ—Ç–µ {bot_id}")
                        file = await context.bot.get_file(broadcast_photo)
                        file_bytes = await file.download_as_bytearray()
                        # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ –±–∞–π—Ç–æ–≤
                        photo_data = io.BytesIO(file_bytes)
                        photo_data.name = 'photo.jpg'
                        logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –±–æ—Ç–µ {bot_id}: {e}")
                        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
                        context.user_data.clear()
                        return
                
                for user in users:
                    user_id = user['user_id'] if isinstance(user, dict) else user
                    try:
                        if broadcast_type == 'photo':
                            # –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            photo_data.seek(0)
                            photo_to_send = InputFile(photo_data, filename='photo.jpg')
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é —á–µ—Ä–µ–∑ child_bot
                            try:
                                if broadcast_text:
                                    html_caption = markdown_to_html(broadcast_text)
                                    await child_bot.send_photo(
                                        chat_id=user_id,
                                        photo=photo_to_send,
                                        caption=html_caption,
                                        parse_mode=ParseMode.HTML
                                    )
                                else:
                                    await child_bot.send_photo(
                                        chat_id=user_id,
                                        photo=photo_to_send
                                    )
                            except Exception as format_error:
                                logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {format_error}")
                                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ–≥–æ
                                photo_data.seek(0)
                                photo_to_send = InputFile(photo_data, filename='photo.jpg')
                                await child_bot.send_photo(
                                    chat_id=user_id,
                                    photo=photo_to_send,
                                    caption=broadcast_text if broadcast_text else None
                                )
                        else:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ child_bot
                            try:
                                html_text = markdown_to_html(broadcast_text)
                                await child_bot.send_message(
                                    chat_id=user_id,
                                    text=html_text,
                                    parse_mode=ParseMode.HTML,
                                    disable_web_page_preview=True
                                )
                            except:
                                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                await child_bot.send_message(
                                    chat_id=user_id,
                                    text=broadcast_text,
                                    disable_web_page_preview=True
                                )
                        success_count += 1
                    except Forbidden:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ {bot_id}")
                        db.block_user(user_id, bot_id)
                        failed_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        failed_count += 1
                    await asyncio.sleep(0.05)
                
                context.user_data.clear()
                
                percent = (success_count/len(users)*100) if len(users) > 0 else 0
                
                await update.message.reply_text(
                    f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: *{success_count}*\n"
                    f"‚ùå –û—à–∏–±–æ–∫: *{failed_count}*\n"
                    f"üìà –í—Å–µ–≥–æ: *{len(users)}*\n\n"
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: *{percent:.1f}%*",
                    parse_mode=ParseMode.MARKDOWN
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã
        async def cancel_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if context.user_data.get('broadcast_step'):
                context.user_data.clear()
                await update.message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        app.add_handler(CommandHandler("send", send_command_handler))
        app.add_handler(CommandHandler("cancel", cancel_command_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
        app.add_handler(MessageHandler(filters.PHOTO, message_handler))
        
        # –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–¢–û–ö–ò! –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º event loop
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ {bot_id}...")
        await app.initialize()
        await app.start()
        
        # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
        bot_info = await app.bot.get_me()
        if bot_info.username:
            bot_manager.data["bots"][bot_id]["username"] = bot_info.username
            bot_manager.save_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        active_bot_instances[bot_id] = {
            'app': app,
            'loop': asyncio.get_event_loop(),
            'stop_event': None,
            'start_time': datetime.now()
        }
        bot_manager.set_bot_status(bot_id, "running")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
        save_running_bots()
        
        logger.info(f"–ó–∞–ø—É—Å–∫–∞—é polling –¥–ª—è –±–æ—Ç–∞ {bot_id}...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ, –∞ –Ω–µ –≤ –ø–æ—Ç–æ–∫–µ
        asyncio.create_task(app.updater.start_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        ))
        
        logger.info(f"‚úÖ –ë–æ—Ç {bot_id} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        await asyncio.sleep(15)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if bot_id in active_bot_instances:
            logger.info(f"‚úÖ –ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã")
            return True
        else:
            logger.error(f"‚ùå –ë–æ—Ç {bot_id} –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–∏—Å
            if bot_id in bot_threads:
                del bot_threads[bot_id]
            return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_id}: {e}")
        bot_manager.set_bot_status(bot_id, "error")
        return False

async def stop_bot(bot_id: str):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –±–æ—Ç–∞"""
    try:
        if bot_id not in active_bot_instances:
            logger.info(f"–ë–æ—Ç {bot_id} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        bot_info = active_bot_instances[bot_id]
        app = bot_info.get('app')
        
        if app:
            try:
                logger.info(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞ {bot_id}...")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater
                if app.updater:
                    await app.updater.stop()
                    logger.info(f"Updater –±–æ—Ç–∞ {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                await app.stop()
                await app.shutdown()
                logger.info(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ {bot_id}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
        if bot_id in active_bot_instances:
            del active_bot_instances[bot_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ bot_threads –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if bot_id in bot_threads:
            del bot_threads[bot_id]
        
        bot_manager.set_bot_status(bot_id, "stopped")
        logger.info(f"‚úÖ –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
        save_running_bots()
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ {bot_id}: {e}")
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        bot_manager.set_bot_status(bot_id, "stopped")
        if bot_id in active_bot_instances:
            del active_bot_instances[bot_id]
        if bot_id in bot_threads:
            del bot_threads[bot_id]
        save_running_bots()
        return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    user = update.effective_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    try:
        db.add_user(
            user.id,
            'main',  # –≠—Ç–æ –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    context.user_data.clear()
    
    if is_admin(user.id):
        keyboard = [[InlineKeyboardButton("üîß –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ *–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è*\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏!\n\n"
            "üîß _–î–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏_",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    else:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–¥–º–∏–Ω –∑–∞–¥–∞–ª –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        start_text = bot_manager.get_bot_text("main")
        try:
            html_text = markdown_to_html(start_text)
            await update.message.reply_text(
                html_text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å HTML: {e}")
            try:
                await update.message.reply_text(
                    start_text,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True
                )
            except Exception:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await update.message.reply_text(
                    start_text,
                    disable_web_page_preview=True
                )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ"""
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    
    keyboard = [
        [
            InlineKeyboardButton("ü§ñ –ë–æ—Ç—ã", callback_data="manage_bots"),
            InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç—ã", callback_data="edit_texts")
        ],
        [
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast_menu"),
            InlineKeyboardButton("üë• –ê–¥–º–∏–Ω—ã", callback_data="manage_admins")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="markdown_help")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def check_database_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)"""
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        import sqlite3
        conn = sqlite3.connect('bots_database.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute('SELECT COUNT(DISTINCT user_id) FROM users')
        unique_users = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM users WHERE is_blocked = 0')
        active_total = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM users WHERE is_blocked = 1')
        blocked_total = cursor.fetchone()[0]
        
        cursor.execute('''
            SELECT bot_id, COUNT(*) as count
            FROM users
            WHERE is_blocked = 0
            GROUP BY bot_id
        ''')
        bot_stats = cursor.fetchall()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üóÑ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö*\n\n"
        message += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{unique_users}*\n"
        message += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: *{active_total}*\n"
        message += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: *{blocked_total}*\n\n"
        
        if bot_stats:
            message += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º:*\n"
            for bot_id, count in bot_stats:
                bot_name = bot_manager.data["bots"].get(bot_id, {}).get("name", bot_id)
                message += f"‚Ä¢ {bot_name}: *{count}* –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
        
        conn.close()
        
        keyboard = [[InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ callback query, —Ç–∞–∫ –∏ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user = query.from_user
        message_obj = query.message
        is_callback = True
    else:
        user = update.effective_user
        message_obj = update.message
        is_callback = False
    
    if not is_admin(user.id):
        if is_callback:
            await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        else:
            await message_obj.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω–∫—É
    context.user_data.clear()
    
    keyboard = [
        [
            InlineKeyboardButton("ü§ñ –ë–æ—Ç—ã", callback_data="manage_bots"),
            InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç—ã", callback_data="edit_texts")
        ],
        [
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast_menu"),
            InlineKeyboardButton("üë• –ê–¥–º–∏–Ω—ã", callback_data="manage_admins")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="markdown_help")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    admin_text = "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –ï—Å–ª–∏ —ç—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_callback:
        try:
            await query.edit_message_text(
                admin_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message_obj.reply_text(
                admin_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message_obj.reply_text(
            admin_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if is_admin(user_id) and context.user_data.get('broadcast_step') == 'text':
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
        caption = update.message.caption or ""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        context.user_data['broadcast_photo'] = photo.file_id
        context.user_data['broadcast_text'] = caption
        context.user_data['broadcast_type'] = 'photo'
        context.user_data['broadcast_step'] = 'confirm'
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_id = context.user_data.get('broadcast_bot_id', 'main')
        bot_name = context.user_data.get('broadcast_bot_name', '–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
        bot_stats = db.get_bot_stats(bot_id)
        users_count = bot_stats['active']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_send"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel_photo")
            ],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="broadcast_edit_photo")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        escaped_caption = escape_markdown(caption) if caption else '(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)'
        escaped_bot_name = escape_markdown(bot_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        await update.message.reply_photo(
            photo=photo.file_id,
            caption=f"üì¢ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–æ—Ç–æ*\n\n"
                   f"ü§ñ *–û—Ç –±–æ—Ç–∞:* {escaped_bot_name}\n"
                   f"üÜî *ID –±–æ—Ç–∞:* `{bot_id}`\n"
                   f"üìä *–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                   f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                   f"üìù *–ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ:*\n{escaped_caption}\n\n"
                   f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        return

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    user = update.effective_user
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –ì–õ–ê–í–ù–û–ì–û –∞–¥–º–∏–Ω–∞ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id == ADMIN_ID and message.reply_to_message:
        reply_to_id = message.reply_to_message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if reply_to_id in forwarded_messages:
            forward_info = forwarded_messages[reply_to_id]
            target_user_id = forward_info['user_id']
            bot_id = forward_info['bot_id']
            
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if bot_id == "main":
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞
                    bot = context.bot
                else:
                    # –î–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –±–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö —Ç–æ–∫–µ–Ω
                    token = bot_manager.get_bot_token(bot_id)
                    if not token:
                        await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
                        return
                    bot = Bot(token=token)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞
                await bot.send_message(
                    chat_id=target_user_id,
                    text=f"üí¨ *–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message.text}",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await message.reply_text(
                    f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: `{target_user_id}`)",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                logger.info(f"–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω {user_id} –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} —á–µ—Ä–µ–∑ –±–æ—Ç–∞ {bot_id}")
                return
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                await message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –±–æ—Ç–µ
    elif is_admin(user_id) and user_id != ADMIN_ID and message.reply_to_message:
        reply_to_id = message.reply_to_message.message_id
        if reply_to_id in forwarded_messages:
            await message.reply_text(
                "‚õî –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                parse_mode=ParseMode.MARKDOWN
            )
            return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –∞–¥–º–∏–Ω, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
    if not is_admin(user_id):
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –ì–õ–ê–í–ù–û–ú–£ –ê–î–ú–ò–ù–£
        logger.info(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É: {ADMIN_ID}")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_name = f"{user.first_name or ''} {user.last_name or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            user_username = f"@{user.username}" if user.username else "–±–µ–∑ username"
            
            # –ü–æ–ª—É—á–∞–µ–º username –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞
            main_bot_data = bot_manager.data["bots"].get("main", {})
            bot_username = main_bot_data.get("username")
            if bot_username:
                bot_display_name = f"@{bot_username}"
            else:
                bot_display_name = "–ì–ª–∞–≤–Ω–æ–º –±–æ—Ç–µ"
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            safe_user_name = escape_markdown(user_name)
            safe_bot_display = escape_markdown(bot_display_name)
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ë–ï–ó —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            info_msg = await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {safe_bot_display}\n"
                     f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {safe_user_name} "
                     f"({user_username}, ID: {user.id})"
            )
            # –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            forwarded_msg = await context.bot.forward_message(
                chat_id=ADMIN_ID,
                from_chat_id=message.chat_id,
                message_id=message.message_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
            if len(forwarded_messages) > MAX_FORWARDED_MESSAGES:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                oldest_keys = sorted(forwarded_messages.keys())[:100]
                for key in oldest_keys:
                    del forwarded_messages[key]
                logger.info(f"–û—á–∏—â–µ–Ω–æ {len(oldest_keys)} —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            forwarded_messages[forwarded_msg.message_id] = {
                'user_id': user.id,
                'bot_id': 'main',
                'original_message_id': message.message_id,
                'timestamp': datetime.now()  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            }
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É, ID: {forwarded_msg.message_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É {ADMIN_ID}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply_text(
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –î–∞–ª–µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Ç.–¥.)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    if context.user_data.get('adding_admin'):
        try:
            new_admin_id = int(update.message.text.strip())
            
            if bot_manager.add_admin(new_admin_id):
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{new_admin_id}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="manage_admins")
                    ]])
                )
            else:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{new_admin_id}` —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="manage_admins")
                    ]])
                )
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if 'adding_admin' in context.user_data:
                del context.user_data['adding_admin']
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_admins")
                ]])
            )
            # –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        return
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞
    if 'editing_bot' in context.user_data:
        bot_id = context.user_data['editing_bot']
        new_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å bot_id –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        if not bot_id or bot_id == "bot":
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ bot_id: '{bot_id}'")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤", callback_data="edit_texts")
                ]])
            )
            del context.user_data['editing_bot']
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–æ—Ç
        if bot_id not in bot_manager.data["bots"]:
            logger.error(f"–ë–æ—Ç {bot_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await update.message.reply_text(
                f"‚ùå –ë–æ—Ç —Å ID `{bot_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤", callback_data="edit_texts")
                ]])
            )
            del context.user_data['editing_bot']
            return
        
        bot_manager.set_bot_text(bot_id, new_text)
        del context.user_data['editing_bot']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è —Å—Å—ã–ª–∫–∏
        bot_data = bot_manager.data["bots"].get(bot_id, {})
        bot_name = bot_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
        username = bot_data.get("username")
        
        keyboard = [
            [InlineKeyboardButton("üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"test_bot_{bot_id}")],
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å username
        if username:
            keyboard.append([
                InlineKeyboardButton(f"üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É @{username}", url=f"https://t.me/{username}")
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data=f"edit_bot_{bot_id}")],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤", callback_data="edit_texts")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
        await update.message.reply_text(
            f"‚úÖ *–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!*\n\n"
            f"ü§ñ –ë–æ—Ç: *{bot_name}*\n"
            f"üÜî ID: `{bot_id}`\n\n"
            f"–¢–µ–∫—Å—Ç –±–æ—Ç–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ
    elif context.user_data.get('creating_bot_step') == 'name':
        bot_name = update.message.text.strip()
        
        if len(bot_name) < 3 or len(bot_name) > 50:
            await update.message.reply_text(
                "‚õî *–û—à–∏–±–∫–∞*\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        context.user_data['new_bot_name'] = bot_name
        context.user_data['creating_bot_step'] = 'id'
        
        keyboard = [
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="manage_bots")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ *–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:* {bot_name}\n\n"
            f"**–®–∞–≥ 2/3:** –í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)\n\n"
            f"–ü—Ä–∏–º–µ—Ä: `flowers_shop_bot`\n"
            f"–ò–ª–∏: `pizza_delivery_bot`\n\n"
            f"ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ - ID
    elif context.user_data.get('creating_bot_step') == 'id':
        bot_id = update.message.text.strip().lower()
        
        if not bot_id.replace('_', '').isalnum() or len(bot_id) < 3:
            await update.message.reply_text(
                "‚õî *–û—à–∏–±–∫–∞ ID*\n\n"
                "ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        if bot_id in bot_manager.data["bots"]:
            await update.message.reply_text(
                f"‚õî *ID —É–∂–µ –∑–∞–Ω—è—Ç*\n\n"
                f"–ë–æ—Ç —Å ID `{bot_id}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π ID.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        context.user_data['new_bot_id'] = bot_id
        context.user_data['creating_bot_step'] = 'token'
        
        keyboard = [
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="manage_bots")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ *ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω:* `{bot_id}`\n\n"
            f"**–®–∞–≥ 3/3:** –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n\n"
            f"–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather:\n"
            f"1. –ù–∞–ø–∏—à–∏—Ç–µ `/newbot`\n"
            f"2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            f"3. –í–≤–µ–¥–∏—Ç–µ username\n"
            f"4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω\n\n"
            f"–¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:\n"
            f"`1234567890:ABCdefGHIjklMNOpqrsTUVwxyz`",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    elif context.user_data.get('broadcast_step') == 'text':
        broadcast_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
        if 'saved_photo' in context.user_data:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ñ–æ—Ç–æ
            context.user_data['broadcast_photo'] = context.user_data['saved_photo']
            context.user_data['broadcast_text'] = broadcast_text
            context.user_data['broadcast_type'] = 'photo'
            context.user_data['broadcast_step'] = 'confirm'
            del context.user_data['saved_photo']  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_id = context.user_data.get('broadcast_bot_id', 'main')
            bot_name = context.user_data.get('broadcast_bot_name', '–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç')
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
            bot_stats = db.get_bot_stats(bot_id)
            users_count = bot_stats['active']
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_send"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel_photo")
                ],
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="broadcast_edit_photo")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            escaped_text = escape_markdown(broadcast_text) if broadcast_text else '(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)'
            escaped_bot_name = escape_markdown(bot_name)
            
            await update.message.reply_photo(
                photo=context.user_data['broadcast_photo'],
                caption=f"üì¢ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–æ—Ç–æ*\n\n"
                       f"ü§ñ *–û—Ç –±–æ—Ç–∞:* {escaped_bot_name}\n"
                       f"üÜî *ID –±–æ—Ç–∞:* `{bot_id}`\n"
                       f"üìä *–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                       f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                       f"üìù *–ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ:*\n{escaped_text}\n\n"
                       f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            return
        
        # –û–±—ã—á–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        context.user_data['broadcast_text'] = broadcast_text
        context.user_data['broadcast_type'] = 'text'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏
        context.user_data['broadcast_step'] = 'confirm'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_send"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")
            ],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="broadcast_edit")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_id = context.user_data.get('broadcast_bot_id', 'main')
        bot_name = context.user_data.get('broadcast_bot_name', '–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
        bot_stats = db.get_bot_stats(bot_id)
        users_count = bot_stats['active']
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        escaped_text = escape_markdown(broadcast_text)
        escaped_bot_name = escape_markdown(bot_name)
        
        await update.message.reply_text(
            f"üì¢ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
            f"ü§ñ *–û—Ç –±–æ—Ç–∞:* {escaped_bot_name}\n"
            f"üÜî *ID –±–æ—Ç–∞:* `{bot_id}`\n"
            f"üìä *–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìù *–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:*\n{escaped_text}\n\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ - —Ç–æ–∫–µ–Ω
    elif context.user_data.get('creating_bot_step') == 'token':
        token = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
        if ':' not in token or len(token) < 40:
            await update.message.reply_text(
                "‚õî *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞*\n\n"
                "–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`1234567890:ABCdefGHIjklMNOpqrsTUVwxyz`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
        for existing_bot_id, bot_data in bot_manager.data["bots"].items():
            if bot_data.get("token") == token:
                existing_bot_name = bot_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
                existing_username = bot_data.get("username")
                
                error_text = f"‚õî *–¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!*\n\n"
                error_text += f"–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É:\n"
                error_text += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: *{existing_bot_name}*\n"
                error_text += f"üÜî ID: `{existing_bot_id}`\n"
                if existing_username:
                    error_text += f"üë§ Username: @{existing_username}\n"
                error_text += f"\n‚ùó –ö–∞–∂–¥—ã–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.\n"
                error_text += f"–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É @BotFather –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π."
                
                keyboard = [
                    [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="manage_bots")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    error_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
                return
        
        bot_name = context.user_data['new_bot_name']
        bot_id = context.user_data['new_bot_id']
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        async def validate_token_with_retries(token: str, max_retries: int = 3):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
            webhook_cleared = False
            
            for attempt in range(max_retries):
                try:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}...")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    if attempt > 0:
                        await asyncio.sleep(2)
                    
                    test_app = Application.builder().token(token).build()
                    await test_app.initialize()
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
                    bot_info = await test_app.bot.get_me()
                    username = bot_info.username
                    logger.info(f"–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, username: @{username}")
                    
                    # –ù–∞ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å webhook
                    if attempt == 0 and not webhook_cleared:
                        try:
                            await test_app.bot.delete_webhook(drop_pending_updates=True)
                            logger.info(f"Webhook –æ—á–∏—â–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ @{username}")
                            webhook_cleared = True
                        except Exception as webhook_error:
                            error_str = str(webhook_error).lower()
                            if "429" in error_str or "flood" in error_str or "too many requests" in error_str:
                                logger.warning(f"–õ–∏–º–∏—Ç –Ω–∞ –æ—á–∏—Å—Ç–∫—É webhook: {webhook_error}")
                                # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
                            else:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook: {webhook_error}")
                    elif attempt > 0:
                        logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É webhook –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    
                    await test_app.shutdown()
                    
                    return True, username, None
                    
                except Exception as e:
                    error_str = str(e).lower()
                    logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏–º–∏—Ç –∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ webhook
                    if ("429" in error_str or "flood" in error_str or "too many requests" in error_str) and attempt == 0:
                        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ webhook")
                        continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    if attempt == max_retries - 1:
                        if "unauthorized" in error_str or "invalid token" in error_str or "404" in error_str:
                            error_message = "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω*\n\n–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞."
                        elif "conflict" in error_str or "terminated by other" in error_str:
                            # –î–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –±–æ—Ç–∞ –ë–ï–ó –æ—á–∏—Å—Ç–∫–∏ webhook –µ—Å–ª–∏ –±—ã–ª –ª–∏–º–∏—Ç
                            try:
                                logger.info("–ü—ã—Ç–∞—é—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –±–æ—Ç–∞ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
                                temp_app = Application.builder().token(token).build()
                                await temp_app.initialize()
                                
                                # –û—á–∏—â–∞–µ–º webhook —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ª–∏–º–∏—Ç–∞
                                if not ("429" in error_str or "flood" in error_str):
                                    try:
                                        await temp_app.bot.delete_webhook(drop_pending_updates=True)
                                    except:
                                        pass
                                
                                await temp_app.shutdown()
                                await asyncio.sleep(3)
                                
                                # –ï—â–µ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
                                test_app = Application.builder().token(token).build()
                                await test_app.initialize()
                                bot_info = await test_app.bot.get_me()
                                username = bot_info.username
                                await test_app.shutdown()
                                logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω, username: @{username}")
                                return True, username, None
                            except:
                                error_message = "‚ö†Ô∏è *–ë–æ—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è*\n\n–≠—Ç–æ—Ç –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Ç–∞–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞."
                        elif "not found" in error_str:
                            error_message = "‚ùå *–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω*\n\n–ë–æ—Ç —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —É @BotFather."
                        else:
                            error_message = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞*\n\n{str(e)}"
                        
                        return False, None, error_message
                    
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
                    continue
            
            return False, None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        token_valid, username, error_message = await validate_token_with_retries(token)
        
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if not token_valid:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω", callback_data="retry_token")],
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="manage_bots")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                error_message or "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É
        bot_manager.add_bot(bot_id, bot_name, token, username)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
        for key in ['creating_bot_step', 'new_bot_name', 'new_bot_id']:
            context.user_data.pop(key, None)
        
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data=f"start_bot_{bot_id}")],
            [InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_bot_{bot_id}")],
            [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞–º–∏", callback_data="manage_bots")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üéâ *–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n"
            f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**\n"
            f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: *{bot_name}*\n"
            f"‚Ä¢ ID: `{bot_id}`\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

async def manage_bots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ (–≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞)
    for key in ['creating_bot_step', 'new_bot_name', 'new_bot_id', 'adding_admin', 'editing_bot']:
        context.user_data.pop(key, None)
    
    bots_list = bot_manager.get_bots_list()
    text = "ü§ñ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏*\n\n*–¢–µ–∫—É—â–∏–µ –±–æ—Ç—ã:*\n"
    
    for bot_id, bot_name, status in bots_list:
        status_emoji = "üü¢" if status == "running" else "üî¥" if status == "stopped" else "üü°"
        # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º bot_id –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ - Markdown –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —ç—Ç–æ–≥–æ
        text += f"{status_emoji} `{bot_id}` - {bot_name} ({status})\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞", callback_data="create_new_bot")],
        [InlineKeyboardButton("üîÑ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏", callback_data="control_bots")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def create_new_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ - —à–∞–≥ 1: –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_bots")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    context.user_data['creating_bot_step'] = 'name'
    
    await query.edit_message_text(
        "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞*\n\n"
        "**–®–∞–≥ 1/3:** –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä: `–¶–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω`\n"
        "–ò–ª–∏: `–î–æ—Å—Ç–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã`",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def retry_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ
    if 'new_bot_name' not in context.user_data or 'new_bot_id' not in context.user_data:
        await query.edit_message_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞–º–∏", callback_data="manage_bots")
            ]])
        )
        return
    
    bot_name = context.user_data['new_bot_name']
    bot_id = context.user_data['new_bot_id']
    
    keyboard = [
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="manage_bots")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
    context.user_data['creating_bot_step'] = 'token'
    
    await query.edit_message_text(
        f"üîÑ *–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞*\n\n"
        f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: *{bot_name}*\n"
        f"üÜî ID: `{bot_id}`\n\n"
        f"**–®–∞–≥ 3/3:** –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n\n"
        f"–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather:\n"
        f"1. –ù–∞–ø–∏—à–∏—Ç–µ `/newbot`\n"
        f"2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        f"3. –í–≤–µ–¥–∏—Ç–µ username\n"
        f"4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω\n\n"
        f"–¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:\n"
        f"`1234567890:ABCdefGHIjklMNOpqrsTUVwxyz`",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def control_bots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–æ—Ç–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    bots_list = bot_manager.get_bots_list()
    keyboard = []
    
    text = "üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–æ—Ç–∞–º–∏\n\n"
    
    if len([b for b in bots_list if b[0] != "main"]) == 0:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö –±–æ—Ç–æ–≤\n\n"
    else:
        text += "üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤:\n\n"
    
    for bot_id, bot_name, status in bots_list:
        if bot_id != "main":  # –ò—Å–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç
            status_emoji = "üü¢" if status == "running" else "üî¥" if status == "stopped" else "üü°"
            bot_data = bot_manager.data["bots"].get(bot_id, {})
            username = bot_data.get("username")
            
            # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç
            text += f"{status_emoji} {bot_name}\n"
            text += f"   ‚îî ID: {bot_id}\n"
            if username:
                text += f"   ‚îî Username: @{username}\n"
            text += f"   ‚îî –°—Ç–∞—Ç—É—Å: {'–ó–∞–ø—É—â–µ–Ω' if status == 'running' else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å username, –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É —Å URL
            if username:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{status_emoji} {bot_name}",
                        url=f"https://t.me/{username}"
                    ),
                    InlineKeyboardButton(
                        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                        callback_data=f"control_bot_{bot_id}"
                    )
                ])
            else:
                keyboard.append([InlineKeyboardButton(
                    f"{status_emoji} {bot_name}",
                    callback_data=f"control_bot_{bot_id}"
                )])
    
    if not keyboard:
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞", callback_data="create_new_bot")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_bots")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    await query.edit_message_text(
        text,
        reply_markup=reply_markup
    )

async def control_single_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–æ—Ç–æ–º"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º bot_id, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    bot_id = query.data[len("control_bot_"):]
    bot_data = bot_manager.data["bots"].get(bot_id, {})
    bot_name = bot_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
    status = bot_data.get("status", "stopped")
    
    status_text = "üü¢ –ó–∞–ø—É—â–µ–Ω" if status == "running" else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if status == "stopped" else "üü° –û—à–∏–±–∫–∞"
    
    keyboard = []
    
    if status == "running":
        keyboard.append([InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data=f"stop_bot_{bot_id}")])
    else:
        keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data=f"start_bot_{bot_id}")])
    
    keyboard.extend([
        [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_bot_{bot_id}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞", callback_data=f"delete_bot_{bot_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="control_bots")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    token_preview = bot_data.get('token', '–ù–µ —É–∫–∞–∑–∞–Ω')
    if len(token_preview) > 20:
        token_preview = token_preview[:20] + "..."
    
    username = bot_data.get("username")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ë–ï–ó —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å bot_id
    text = f"ü§ñ –ë–æ—Ç: {bot_name}\n\n"
    text += f"üÜî ID: {bot_id}\n"
    if username:
        text += f"üë§ Username: @{username}\n"
    text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
    text += f"üîó –¢–æ–∫–µ–Ω: {token_preview}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–ï–ó parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ –≤ bot_id
    await query.edit_message_text(
        text,
        reply_markup=reply_markup
    )

async def start_bot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    if not is_admin(query.from_user.id):
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º bot_id, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    bot_id = query.data[len("start_bot_"):]
    print(f"\n\n\nBOT\n\n\n\n\n\{bot_id}")
    token = bot_manager.get_bot_token(bot_id)
    bot_name = bot_manager.data["bots"].get(bot_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
    
    if not token:
        await query.edit_message_text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
    await query.edit_message_text(
        f"‚è≥ *–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞*\n\n"
        f"–ë–æ—Ç *{bot_name}* (`{bot_id}`) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    success = await start_bot(bot_id, token)
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await asyncio.sleep(2)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if success and bot_id in active_bot_instances:
        keyboard = [
            [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data=f"stop_bot_{bot_id}")],
            [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_bot_{bot_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞", callback_data=f"delete_bot_{bot_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="control_bots")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úÖ *–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*\n\n"
            f"ü§ñ *{bot_name}*\n"
            f"üÜî ID: `{bot_id}`\n"
            f"üìä –°—Ç–∞—Ç—É—Å: üü¢ –ó–∞–ø—É—â–µ–Ω\n\n"
            f"–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã!",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    else:
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"start_bot_{bot_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"control_bot_{bot_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞*\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ *{bot_name}* (`{bot_id}`)\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω\n"
            f"‚Ä¢ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

async def stop_bot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    
    if not is_admin(query.from_user.id):
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º bot_id, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    bot_id = query.data[len("stop_bot_"):]
    bot_name = bot_manager.data["bots"].get(bot_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await query.edit_message_text(
        f"‚è≥ *–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞*\n\n"
        f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞ *{bot_name}* (`{bot_id}`)...\n\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    success = await stop_bot(bot_id)
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await asyncio.sleep(2)
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await query.edit_message_text(
        f"‚úÖ *–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n"
        f"–ë–æ—Ç *{bot_name}* (`{bot_id}`) —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"control_bot_{bot_id}")
        ]])
    )

async def delete_bot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º bot_id, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    # delete_bot_<bot_id> - —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "delete_bot_"
    bot_id = query.data[len("delete_bot_"):]
    bot_name = bot_manager.data["bots"].get(bot_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
    
    keyboard = [
        [InlineKeyboardButton("‚ö†Ô∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{bot_id}")],
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"control_bot_{bot_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ*\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞:\n"
        f"*{bot_name}* (`{bot_id}`)\n\n"
        f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def confirm_delete_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º bot_id, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    # confirm_delete_<bot_id> - —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "confirm_delete_"
    prefix = "confirm_delete_"
    if not query.data.startswith(prefix):
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {query.data}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞–º–∏", callback_data="manage_bots")
            ]])
        )
        return
    
    bot_id = query.data[len(prefix):]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å bot_id
    if bot_id == "bot" or not bot_id:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID: '{bot_id}'")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞–º–∏", callback_data="manage_bots")
            ]])
        )
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
    if bot_id in active_bot_instances:
        await stop_bot(bot_id)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success = bot_manager.delete_bot(bot_id)
    
    keyboard = [
        [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞–º–∏", callback_data="manage_bots")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if success:
        await query.edit_message_text(
            f"‚úÖ *–ë–æ—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ*\n\n"
            f"–ë–æ—Ç `{bot_id}` –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    else:
        await query.edit_message_text(
            f"‚ùå *–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ `{bot_id}`",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

async def edit_texts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.clear()
    
    bots_list = bot_manager.get_bots_list()
    keyboard = []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ë–ï–ó Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    text = "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –±–æ—Ç–æ–≤\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    
    for bot_id, bot_name, status in bots_list:
        bot_data = bot_manager.data["bots"].get(bot_id, {})
        username = bot_data.get("username")
        status_emoji = "üü¢" if status == "running" else "üî¥"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —Ç–µ–∫—Å—Ç –ë–ï–ó —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if bot_id == "main":
            # –ü–æ–ª—É—á–∞–µ–º username –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞
            main_bot_data = bot_manager.data["bots"].get("main", {})
            main_bot_username = main_bot_data.get("username")
            if main_bot_username:
                text += f"{status_emoji} @{main_bot_username} (–≥–ª–∞–≤–Ω—ã–π)\n"
            else:
                text += f"{status_emoji} –ì–ª–∞–≤–Ω—ã–π –±–æ—Ç\n"
        else:
            text += f"{status_emoji} {bot_name}\n"
        
        text += f"   ‚îî ID: {bot_id}\n"
        if username:
            text += f"   ‚îî Username: @{username}\n"
        text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        if username:
            keyboard.append([
                InlineKeyboardButton(f"‚úèÔ∏è {bot_name}", callback_data=f"edit_bot_{bot_id}"),
                InlineKeyboardButton(f"üëÅ –û—Ç–∫—Ä—ã—Ç—å", url=f"https://t.me/{username}")
            ])
        else:
            keyboard.append([InlineKeyboardButton(f"‚úèÔ∏è {bot_name}", callback_data=f"edit_bot_{bot_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–ï–ó parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    await query.edit_message_text(
        text,
        reply_markup=reply_markup
    )

async def edit_bot_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º bot_id, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    # edit_bot_<bot_id> - —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "edit_bot_"
    prefix = "edit_bot_"
    if not query.data.startswith(prefix):
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {query.data}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_texts")
            ]])
        )
        return
    
    bot_id = query.data[len(prefix):]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if bot_id == "bot" or not bot_id:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID: '{bot_id}'")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_texts")
            ]])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–æ—Ç
    if bot_id not in bot_manager.data["bots"]:
        logger.error(f"–ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        await query.edit_message_text(
            f"‚ùå –ë–æ—Ç —Å ID `{bot_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_texts")
            ]])
        )
        return
    
    current_text = bot_manager.get_bot_text(bot_id)
    bot_data = bot_manager.data["bots"].get(bot_id, {})
    bot_name = bot_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
    username = bot_data.get("username")
    status = bot_data.get("status", "stopped")
    
    keyboard = [
        [InlineKeyboardButton("üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"test_bot_{bot_id}")],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å username
    if username:
        # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º username –≤ –∫–Ω–æ–ø–∫–µ
        keyboard.append([
            InlineKeyboardButton(f"üëÅ –û—Ç–∫—Ä—ã—Ç—å @{username}", url=f"https://t.me/{username}")
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_texts")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['editing_bot'] = bot_id
    
    status_emoji = "üü¢" if status == "running" else "üî¥"
    
    # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º ID –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –∏ username –ø–æ—Å–ª–µ @
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è*\n\n"
    header += f"{status_emoji} *–ë–æ—Ç:* {bot_name}\n"
    header += f"üÜî *ID:* `{bot_id}`\n"
    if username:
        header += f"üë§ *Username:* @{username}\n"
    header += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    await query.edit_message_text(
        f"{header}"
        f"üìÑ *–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:*\n```\n{current_text}\n```\n\n"
        f"üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        f"üé® *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:*\n"
        f"‚Ä¢ \\*–∂–∏—Ä–Ω—ã–π\\* ‚Üí *–∂–∏—Ä–Ω—ã–π*\n"
        f"‚Ä¢ \\_–∫—É—Ä—Å–∏–≤\\_ ‚Üí _–∫—É—Ä—Å–∏–≤_\n"
        f"‚Ä¢ \\[—Ç–µ–∫—Å—Ç\\]\\(URL\\) ‚Üí —Å—Å—ã–ª–∫–∞\n"
        f"‚Ä¢ \\`–∫–æ–¥\\` ‚Üí `–∫–æ–¥`\n\n"
        f"–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ñ–æ—Ä–º–∞—Ç.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def test_bot_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º bot_id, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    # test_bot_<bot_id> - —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "test_bot_"
    bot_id = query.data[len("test_bot_"):]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–æ—Ç
    if bot_id not in bot_manager.data["bots"]:
        await query.message.reply_text(
            f"‚ùå –ë–æ—Ç —Å ID '{bot_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤", callback_data="edit_texts")
            ]])
        )
        return
    
    text = bot_manager.get_bot_text(bot_id)
    bot_data = bot_manager.data["bots"].get(bot_id, {})
    bot_name = bot_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
    username = bot_data.get("username")
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    if text == "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω":
        await query.message.reply_text(
            f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –¥–ª—è –±–æ—Ç–∞ '{bot_name}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_bot_{bot_id}"),
                InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="edit_texts")
            ]])
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞ –ë–ï–ó —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    test_header = f"üß™ –¢–µ—Å—Ç –±–æ—Ç–∞: {bot_name}\n"
    test_header += f"üÜî ID: {bot_id}\n"
    if username:
        test_header += f"üë§ Username: @{username}\n"
    test_header += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∞–º –±–æ—Ç
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Markdown –≤ HTML (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç —Å–∞–º –±–æ—Ç)
        html_text = markdown_to_html(text)
        await query.message.reply_text(
            test_header + "üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML:\n\n" + html_text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å HTML –¥–ª—è —Ç–µ—Å—Ç–∞ –±–æ—Ç–∞ {bot_id}: {e}")
        try:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å HTML, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await query.message.reply_text(
                test_header + "üìù –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n" + text,
                disable_web_page_preview=True
            )
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞ {bot_id}: {e2}")
            await query.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}"
            )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    context.user_data.clear()
    
    bots_list = bot_manager.get_bots_list()
    total_bots = len(bots_list)
    running_bots_count = sum(1 for _, _, status in bots_list if status == "running")
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    global_stats = db.get_global_stats()
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    admins_count = len(bot_manager.admins)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    premium_percent = 0
    if global_stats['active_users'] > 0:
        premium_percent = (global_stats['premium_users'] / global_stats['active_users']) * 100
    
    await query.edit_message_text(
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
        f"ü§ñ *–ë–æ—Ç—ã:*\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_bots}\n"
        f"‚Ä¢ –ó–∞–ø—É—â–µ–Ω–æ: üü¢ {running_bots_count}\n"
        f"‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: üî¥ {total_bots - running_bots_count}\n\n"
        f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {global_stats['unique_users']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {global_stats['active_users']}\n"
        f"‚Ä¢ ‚≠ê –ü—Ä–µ–º–∏—É–º: {global_stats['premium_users']} ({premium_percent:.1f}%)\n\n"
        f"üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è:*\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {admins_count}\n"
        f"‚Ä¢ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω: `{ADMIN_ID}`",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def manage_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–º–∏ –∞–¥–º–∏–Ω–∞–º–∏
    if user_id != ADMIN_ID:
        await query.edit_message_text("‚õî –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–º–∏ –∞–¥–º–∏–Ω–∞–º–∏")
        return
    
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    if 'adding_admin' in context.user_data:
        del context.user_data['adding_admin']
    
    admins_list = bot_manager.get_admins_list()
    
    text = "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏*\n\n*–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã:*\n"
    for admin_id in admins_list:
        if admin_id == ADMIN_ID:
            text += f"üëë `{admin_id}` (–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)\n"
        else:
            text += f"üë§ `{admin_id}`\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        return
    
    context.user_data['adding_admin'] = True
    
    keyboard = [
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_admins")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É @userinfobot",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        return
    
    admins_list = [admin_id for admin_id in bot_manager.get_admins_list() if admin_id != ADMIN_ID]
    
    if not admins_list:
        await query.edit_message_text(
            "‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_admins")
            ]])
        )
        return
    
    keyboard = []
    for admin_id in admins_list:
        keyboard.append([InlineKeyboardButton(
            f"‚ùå {admin_id}", 
            callback_data=f"confirm_remove_admin_{admin_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_admins")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ûñ *–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def confirm_remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º admin_id
    # confirm_remove_admin_<admin_id> - —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    admin_id = int(query.data[len("confirm_remove_admin_"):])
    
    if bot_manager.remove_admin(admin_id):
        await query.edit_message_text(
            f"‚úÖ –ê–¥–º–∏–Ω `{admin_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="manage_admins")
            ]])
        )
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_admins")
            ]])
        )

async def markdown_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ Markdown —Ä–∞–∑–º–µ—Ç–∫–µ"""
    query = update.callback_query
    await query.answer()
    
    help_text = """‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ç–∫–µ*

üìù *–û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:*
‚Ä¢ `*–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*` ‚Üí *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*
‚Ä¢ `_–∫—É—Ä—Å–∏–≤_` ‚Üí _–∫—É—Ä—Å–∏–≤_
‚Ä¢ `` `–∫–æ–¥` `` ‚Üí `–∫–æ–¥`
‚Ä¢ `__–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__` ‚Üí –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π
‚Ä¢ `~–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~` ‚Üí –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π

üîó *–°—Å—ã–ª–∫–∏:*
‚Ä¢ `[—Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏](https://example.com)`
‚Ä¢ `[—Ç–µ–∫—Å—Ç](www.site.com)` ‚Üí –¥–æ–±–∞–≤–∏—Ç https://

üé® *–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:*
‚Ä¢ `[*–∂–∏—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞*](url)`
‚Ä¢ `[_–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞_](url)`
‚Ä¢ `**–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∂–∏—Ä–Ω—ã–π**`

üìå *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
```
üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* üå∏

üìã *–ù–∞—à–∏ —É—Å–ª—É–≥–∏:*
‚Ä¢ _–ë—É–∫–µ—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑_
‚Ä¢ `–î–æ—Å—Ç–∞–≤–∫–∞` –ø–æ –≥–æ—Ä–æ–¥—É

üíê *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±—É–∫–µ—Ç—ã:*
1. [*–†–æ–∑—ã*](https://example.com/roses)
2. [_–¢—é–ª—å–ø–∞–Ω—ã_](https://example.com/tulips)
```

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown –≤ HTML
‚Ä¢ –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
‚Ä¢ –ú–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏

"""
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def broadcast_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 1):
    """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    logger.info(f"broadcast_menu called with page={page}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_global_stats()
    users_count = stats['active_users']
    bots_list = bot_manager.get_bots_list()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã
    running_bots = [(bot_id, bot_name, status) for bot_id, bot_name, status in bots_list if status == "running"]
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Total bots: {len(bots_list)}, Running bots: {len(running_bots)}")
    for bot_id, bot_name, status in running_bots:
        logger.info(f"Running bot: {bot_id} ({bot_name}) - status: {status}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    BOTS_PER_PAGE = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_bots = len(running_bots)
    total_pages = (total_bots + BOTS_PER_PAGE - 1) // BOTS_PER_PAGE  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * BOTS_PER_PAGE
    end_idx = min(start_idx + BOTS_PER_PAGE, total_bots)
    
    # –ë–æ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_page_bots = running_bots[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    keyboard = []
    
    for bot_id, bot_name, status in current_page_bots:
        bot_data = bot_manager.data["bots"].get(bot_id, {})
        username = bot_data.get("username")
        
        if bot_id == "main":
            # –ì–ª–∞–≤–Ω—ã–π –±–æ—Ç
            main_bot_username = bot_data.get("username")
            if main_bot_username:
                button_text = f"üì§ @{main_bot_username} (–≥–ª–∞–≤–Ω—ã–π)"
            else:
                button_text = "üì§ –ì–ª–∞–≤–Ω—ã–π –±–æ—Ç"
            callback_data = "broadcast_start_main"
            logger.info(f"Creating button for MAIN bot with callback_data: {callback_data}")
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        else:
            # –î–æ—á–µ—Ä–Ω–∏–µ –±–æ—Ç—ã
            if username:
                button_text = f"üì§ @{username}"
            else:
                button_text = f"üì§ {bot_name}"
            callback_data = f"broadcast_bot_{bot_id}"
            logger.info(f"Creating button for bot '{bot_id}' (name: {bot_name}) with callback_data: {callback_data}")
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"broadcast_page_{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data=f"broadcast_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats")],
        [InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ë–ï–ó Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    text = f"üì¢ –ü–∞–Ω–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
    text += f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
    text += f"ü§ñ –í—Å–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤: {total_bots}\n\n"
    
    if total_pages > 1:
        text += f"üìã –ë–æ—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Å—Ç—Ä. {page}/{total_pages}):\n\n"
    else:
        text += f"üìã –ë–æ—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ –±–æ—Ç–∞—Ö –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for bot_id, bot_name, status in current_page_bots:
        bot_data = bot_manager.data["bots"].get(bot_id, {})
        username = bot_data.get("username")
        bot_stats = db.get_bot_stats(bot_id)
        
        if bot_id == "main":
            if username:
                text += f"üü¢ @{username} (–≥–ª–∞–≤–Ω—ã–π)\n"
            else:
                text += f"üü¢ –ì–ª–∞–≤–Ω—ã–π –±–æ—Ç\n"
        else:
            # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode
            text += f"üü¢ {bot_name}\n"
            if username:
                text += f"   ‚îî @{username}\n"
        
        text += f"   ‚îî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bot_stats['active']}\n\n"
    
    text += "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–ï–ó parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await query.edit_message_text(
        text,
        reply_markup=reply_markup
    )

async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ - –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º callback_data –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"broadcast_start called with callback_data: {query.data}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞
    if query.data == "broadcast_start_main":
        bot_id = "main"
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        main_bot_data = bot_manager.data["bots"].get("main", {})
        bot_name = main_bot_data.get("name", "–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç")
    elif query.data.startswith("broadcast_bot_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º bot_id –ø–æ—Å–ª–µ "broadcast_bot_"
        bot_id = query.data.replace("broadcast_bot_", "")
        logger.info(f"Extracted bot_id: '{bot_id}' from callback_data: '{query.data}'")
        logger.info(f"Available bots: {list(bot_manager.data['bots'].keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–æ—Ç
        if bot_id not in bot_manager.data["bots"]:
            logger.error(f"Bot '{bot_id}' not found in bot_manager.data")
            logger.error(f"Available bot IDs: {list(bot_manager.data['bots'].keys())}")
            await query.edit_message_text(
                f"‚ùå –ë–æ—Ç —Å ID `{bot_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã: {', '.join(bot_manager.data['bots'].keys())}",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="broadcast_menu")
                ]])
            )
            return
            
        bot_data = bot_manager.data["bots"][bot_id]
        bot_name = bot_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
        logger.info(f"Bot found: {bot_name} (ID: {bot_id})")
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data
        logger.error(f"Unknown callback_data format: {query.data}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="broadcast_menu")
            ]])
        )
        return
    
    context.user_data['broadcast_step'] = 'text'
    context.user_data['broadcast_bot_id'] = bot_id
    context.user_data['broadcast_bot_name'] = bot_name
    
    keyboard = [
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="broadcast_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    bot_stats = db.get_bot_stats(bot_id)
    users_count = bot_stats['active']
    
    await query.edit_message_text(
        f"üìù *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        f"ü§ñ *–û—Ç –±–æ—Ç–∞:* {bot_name}\n"
        f"üÜî *ID –±–æ—Ç–∞:* `{bot_id}`\n"
        f"üë• *–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {users_count}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        f"‚Ä¢ üìù *–¢–µ–∫—Å—Ç* - –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"‚Ä¢ üñº *–§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é* - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç\n\n"
        f"üé® *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:*\n"
        f"‚Ä¢ \\*–∂–∏—Ä–Ω—ã–π\\* ‚Üí *–∂–∏—Ä–Ω—ã–π*\n"
        f"‚Ä¢ \\_–∫—É—Ä—Å–∏–≤\\_ ‚Üí _–∫—É—Ä—Å–∏–≤_\n"
        f"‚Ä¢ \\[—Ç–µ–∫—Å—Ç\\]\\(—Å—Å—ã–ª–∫–∞\\) ‚Üí —Å—Å—ã–ª–∫–∞",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    if not is_admin(query.from_user.id):
        return
    
    broadcast_text = context.user_data.get('broadcast_text')
    broadcast_type = context.user_data.get('broadcast_type', 'text')
    broadcast_photo = context.user_data.get('broadcast_photo')
    bot_id = context.user_data.get('broadcast_bot_id', 'main')
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if bot_id == "main":
        main_bot_data = bot_manager.data["bots"].get("main", {})
        bot_name = main_bot_data.get("name", "–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç")
    else:
        bot_data = bot_manager.data["bots"].get(bot_id, {})
        bot_name = bot_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
    
    if broadcast_type == 'text' and not broadcast_text:
        await query.edit_message_text("‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    elif broadcast_type == 'photo' and not broadcast_photo:
        # –î–ª—è —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption –≤–º–µ—Å—Ç–æ edit_message_text
        if query.message and query.message.caption:
            await query.edit_message_caption(caption="‚ùå –§–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            await query.edit_message_text(text="‚ùå –§–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
    try:
        users = db.get_bot_users(bot_id, only_active=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return
    
    user_ids = [user['user_id'] if isinstance(user, dict) else user for user in users]
    total_users = len(user_ids)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ë–ï–ó –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞)
    progress_text = f"‚è≥ *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...*\n\n" \
                    f"ü§ñ *–û—Ç –±–æ—Ç–∞:* {bot_name}\n" \
                    f"üë• *–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {total_users}\n" \
                    f"‚öôÔ∏è *–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤...*\n\n" \
                    f"_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏_"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–ï–ó –∫–Ω–æ–ø–∫–∏
    if broadcast_type == 'photo' and query.message and query.message.caption is not None:
        progress_message = await query.edit_message_caption(
            caption=progress_text,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        progress_message = await query.edit_message_text(
            text=progress_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ callback
    context.user_data['broadcast_message_id'] = progress_message.message_id
    context.user_data['broadcast_chat_id'] = progress_message.chat.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if bot_id == "main":
        bot_token = MAIN_BOT_TOKEN
    else:
        # –î–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –±–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö —Ç–æ–∫–µ–Ω
        bot_token = bot_manager.get_bot_token(bot_id)
        if not bot_token:
            await query.edit_message_text("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    photo_bytes = None
    if broadcast_type == 'photo':
        try:
            logger.info(f"–°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –±–æ—Ç–µ {bot_id}")
            file = await context.bot.get_file(broadcast_photo)
            photo_bytes = await file.download_as_bytearray()
            logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –±–æ—Ç–∞ {bot_id}, —Ä–∞–∑–º–µ—Ä: {len(photo_bytes)} –±–∞–π—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π
    context.user_data['broadcast_active'] = True
    context.user_data['broadcast_started'] = False  # –§–ª–∞–≥ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    sent_count = 0
    last_update_time = time.time()
    first_message_sent = False  # –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    async def progress_callback(current, total, progress_info=None):
        nonlocal sent_count, last_update_time, first_message_sent
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if context.user_data.get('broadcast_stopped', False):
            logger.info(f"Broadcast stop detected in progress callback at {current}/{total}")
            return
            
        sent_count = current
        context.user_data['last_processed'] = current  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        remaining = total - current
        
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if not first_message_sent:
            first_message_sent = True
            context.user_data['broadcast_started'] = True
            
            # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            stop_keyboard = [
                [InlineKeyboardButton("üõë –û–°–¢–ê–ù–û–í–ò–¢–¨ –†–ê–°–°–´–õ–ö–£", callback_data="stop_broadcast")]
            ]
            reply_markup = InlineKeyboardMarkup(stop_keyboard)
            
            initial_text = f"üöÄ *–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!*\n\n" \
                          f"ü§ñ *–û—Ç –±–æ—Ç–∞:* {bot_name}\n" \
                          f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total}\n" \
                          f"‚úÖ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* 1/{total}\n" \
                          f"üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å:* [‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] –Ω–∞—á–∞–ª–æ...\n\n" \
                          f"_–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É_"
            
            try:
                if broadcast_type == 'photo' and progress_message.caption is not None:
                    await progress_message.edit_caption(
                        caption=initial_text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup
                    )
                else:
                    await progress_message.edit_text(
                        text=initial_text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup
                    )
            except:
                pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        current_time = time.time()
        if current_time - last_update_time >= 1.0 or current == total:
            last_update_time = current_time
            
            progress_percent = (current / total * 100) if total > 0 else 0
            progress_bar = "‚ñì" * int(progress_percent / 10) + "‚ñë" * (10 - int(progress_percent / 10))
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
            elapsed = current_time - start_time.timestamp() if hasattr(start_time, 'timestamp') else 1
            speed = current / elapsed if elapsed > 0 else 0
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if progress_info:
                failed_count = progress_info.get('failed', 0)
                blocked_count = progress_info.get('blocked', 0)
                new_progress_text = f"üì§ *–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ*\n\n" \
                                   f"ü§ñ *–û—Ç –±–æ—Ç–∞:* {bot_name}\n" \
                                   f"üë• *–û—Ç–ø—Ä–∞–≤–∫–∞ {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...*\n" \
                                   f"üìä *–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:* {remaining}\n" \
                                   f"üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å:* [{progress_bar}] {progress_percent:.1f}%\n" \
                                   f"‚úÖ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* {current}\n" \
                                   f"‚ùå *–û—à–∏–±–æ–∫:* {failed_count}\n" \
                                   f"üö´ *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏:* {blocked_count}\n" \
                                   f"‚ö° *–°–∫–æ—Ä–æ—Å—Ç—å:* {speed:.1f} —Å–æ–æ–±—â/—Å–µ–∫\n" \
                                   f"üöÄ *–ú–µ—Ç–æ–¥:* –ë—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞"
            else:
                new_progress_text = f"üì§ *–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ*\n\n" \
                                   f"ü§ñ *–û—Ç –±–æ—Ç–∞:* {bot_name}\n" \
                                   f"üë• *–û—Ç–ø—Ä–∞–≤–∫–∞ {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...*\n" \
                                   f"üìä *–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:* {remaining}\n" \
                                   f"üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å:* [{progress_bar}] {progress_percent:.1f}%\n" \
                                   f"‚úÖ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* {current}\n" \
                                   f"‚ö° *–°–∫–æ—Ä–æ—Å—Ç—å:* {speed:.1f} —Å–æ–æ–±—â/—Å–µ–∫\n" \
                                   f"üöÄ *–ú–µ—Ç–æ–¥:* –ë—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞"
            
            # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å)
            if context.user_data.get('broadcast_started', False):
                stop_keyboard = [
                    [InlineKeyboardButton("üõë –û–°–¢–ê–ù–û–í–ò–¢–¨ –†–ê–°–°–´–õ–ö–£", callback_data="stop_broadcast")]
                ]
                reply_markup = InlineKeyboardMarkup(stop_keyboard)
            else:
                reply_markup = None
            
            try:
                if broadcast_type == 'photo' and progress_message.caption is not None:
                    await progress_message.edit_caption(
                        caption=new_progress_text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup
                    )
                else:
                    await progress_message.edit_text(
                        text=new_progress_text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup
                    )
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                pass
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏
    start_time = datetime.now()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π
    context.user_data['broadcast_active'] = True
    context.user_data['broadcast_stopped'] = False
    context.user_data['broadcast_results'] = []
    
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    def check_if_stopped():
        return context.user_data.get('broadcast_stopped', False)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    async def run_broadcast():
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            result = await OptimizedBroadcast.send_broadcast(
                bot_token=bot_token,
                users=user_ids,
                text=broadcast_text if broadcast_type == 'text' else None,
                photo=photo_bytes if broadcast_type == 'photo' else None,
                photo_caption=broadcast_text if broadcast_type == 'photo' else None,
                parse_mode=ParseMode.HTML,
                progress_callback=progress_callback,
                auto_optimize=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
                stop_check=check_if_stopped,  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                template_chat_id=ADMIN_ID,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–¥–º–∏–Ω–∞ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
                bot_name=bot_name  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            if context.user_data.get('broadcast_stopped', False):
                logger.info("Broadcast was stopped by user")
                return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
            for res in result['results']:
                if res.is_blocked:
                    db.block_user(res.user_id, bot_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await show_broadcast_results(progress_message, result, bot_name, broadcast_type, context)
            
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ run_broadcast: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                error_text = f"‚ùå *–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n{str(e)}"
                if broadcast_type == 'photo' and progress_message.caption is not None:
                    await progress_message.edit_caption(
                        caption=error_text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")
                        ]])
                    )
                else:
                    await progress_message.edit_text(
                        text=error_text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")
                        ]])
                    )
            except:
                pass
            raise
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏
    async def show_broadcast_results(message, result, bot_name, broadcast_type, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        was_cancelled = context.user_data.get('broadcast_stopped', False)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        keys_to_clear = ['broadcast_active', 'broadcast_stopped', 'broadcast_message_id',
                        'broadcast_chat_id', 'broadcast_text', 'broadcast_type',
                        'broadcast_photo', 'broadcast_bot_id', 'broadcast_bot_name']
        for key in keys_to_clear:
            context.user_data.pop(key, None)
        
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        keyboard = [
            [InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        percent = (result['success'] / result['total'] * 100) if result['total'] > 0 else 0
        speedup = result['workers_used']
        time_saved = result['total_time'] * (speedup - 1) / speedup  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–µ
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if was_cancelled:
            status_text = "üõë *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!*"
        else:
            status_text = "‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*"
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å –∏–º–µ–Ω–µ–º –±–æ—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        bot_display = result.get('bot_name', bot_name)
        result_text = f"{status_text}\n\n" \
                      f"ü§ñ *–ë–æ—Ç:* {bot_display}\n" \
                      f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n" \
                      f"‚úÖ –£—Å–ø–µ—à–Ω–æ: *{result['success']}*\n" \
                      f"‚ùå –û—à–∏–±–æ–∫: *{result['failed']}*\n" \
                      f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: *{result['blocked']}*\n" \
                      f"üìà –í—Å–µ–≥–æ: *{result['total']}*\n\n" \
                      f"‚è± –í—Ä–µ–º—è: *{result['total_time']:.1f}* —Å–µ–∫\n" \
                      f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: *{speedup}x* (–≤–æ—Ä–∫–µ—Ä–æ–≤: {result['workers_used']})\n" \
                      f"üíæ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ~*{time_saved:.1f}* —Å–µ–∫\n" \
                      f"üì® –°–∫–æ—Ä–æ—Å—Ç—å: *{result['messages_per_second']:.1f}* —Å–æ–æ–±—â/—Å–µ–∫\n\n" \
                      f"–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: *{percent:.1f}%*"
        
        try:
            if broadcast_type == 'photo' and message.caption is not None:
                await message.edit_caption(
                    caption=result_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
            else:
                await message.edit_text(
                    text=result_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
        except:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.reply_text(
                result_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    asyncio.create_task(run_broadcast())
    
    # –ù–ï –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É, –ø–æ–∑–≤–æ–ª—è—è –±–æ—Ç—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
    logger.info("Broadcast task started asynchronously")

async def stop_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    
    if not is_admin(query.from_user.id):
        try:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ query
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –ò –æ–Ω–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å
    if context.user_data.get('broadcast_active') and context.user_data.get('broadcast_started') and not context.user_data.get('broadcast_stopped'):
        logger.info("Stop broadcast requested by admin")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        context.user_data['broadcast_stopped'] = True
        context.user_data['broadcast_active'] = False
        
        try:
            await query.answer(
                "üõë –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è!\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
                show_alert=True
            )
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ query
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        message_id = context.user_data.get('broadcast_message_id')
        chat_id = context.user_data.get('broadcast_chat_id')
        
        if message_id and chat_id:
            try:
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Ä–∫–µ—Ä—ã —É—Å–ø–µ–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                await asyncio.sleep(3)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                successful = context.user_data.get('last_processed', 0)
                
                # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
                back_keyboard = [
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]
                ]
                reply_markup = InlineKeyboardMarkup(back_keyboard)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                stopped_bot_name = context.user_data.get('broadcast_bot_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å –∏–º–µ–Ω–µ–º –±–æ—Ç–∞
                stop_time = datetime.now()
                final_text = (
                    f"üõë **–†–ê–°–°–´–õ–ö–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê!**\n\n"
                    f"ü§ñ **–ë–æ—Ç:** {stopped_bot_name}\n"
                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:**\n"
                    f"‚îú üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: **{successful}** —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    f"‚îú ‚è± –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {stop_time.strftime('%H:%M:%S')}\n"
                    f"‚îî üìå –°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                    f"_–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É._"
                )
                
                # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                    if context.user_data.get('broadcast_type') == 'photo':
                        await query.bot.edit_message_caption(
                            chat_id=chat_id,
                            message_id=message_id,
                            caption=final_text,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=reply_markup
                        )
                    else:
                        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await query.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=final_text,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=reply_markup
                        )
                except Exception as edit_error:
                    logger.warning(f"Could not edit message: {edit_error}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await query.message.reply_text(
                        final_text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup
                    )
                
                logger.info(f"Broadcast stopped. Sent {successful} messages")
                
            except Exception as e:
                logger.error(f"Error in stop_broadcast: {e}")
                await query.message.reply_text(
                    f"‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
            await query.message.reply_text(
                "üõë –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")
                ]])
            )
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        keys_to_remove = [
            'broadcast_active', 'broadcast_stopped', 'broadcast_message_id',
            'broadcast_chat_id', 'broadcast_results', 'last_processed',
            'broadcast_text', 'broadcast_type', 'broadcast_photo',
            'broadcast_bot_id', 'broadcast_bot_name'
        ]
        for key in keys_to_remove:
            context.user_data.pop(key, None)
        
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏
        if not context.user_data.get('broadcast_started'):
            # –†–∞—Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
            try:
                await query.answer("‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=True)
            except:
                pass
        else:
            # –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
            try:
                await query.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
            except Exception as e:
                # –ï—Å–ª–∏ query —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.warning(f"Query expired: {e}")
                try:
                    await query.message.reply_text(
                        "‚ÑπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")
                        ]])
                    )
                except:
                    pass

async def broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    context.user_data.clear()
    
    keyboard = [
        [InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="broadcast_menu")],
        [InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    cancel_text = "‚ùå *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n" \
                  "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    if query.message.text:
        # –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_text(
                cancel_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                cancel_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            try:
                await query.message.delete()
            except:
                pass
    elif query.message.caption is not None:
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ) –∏ –ø–æ–¥–ø–∏—Å—å—é
        try:
            await query.edit_message_caption(
                caption=cancel_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                cancel_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            try:
                await query.message.delete()
            except:
                pass
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await query.message.reply_text(
            cancel_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        try:
            await query.message.delete()
        except:
            pass

async def broadcast_cancel_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    context.user_data.clear()
    
    keyboard = [
        [InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="broadcast_menu")],
        [InlineKeyboardButton("üîô –ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    cancel_text = "‚ùå *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n" \
                  "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
    
    # –î–ª—è —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption
    try:
        await query.edit_message_caption(
            caption=cancel_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å —Ñ–æ—Ç–æ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            cancel_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        try:
            await query.message.delete()
        except:
            pass

async def broadcast_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    context.user_data['broadcast_step'] = 'text'
    
    keyboard = [
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="broadcast_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    edit_text = "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n" \
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n" \
                "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é"
    
    try:
        await query.edit_message_text(
            edit_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            edit_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        try:
            await query.message.delete()
        except:
            pass

async def broadcast_edit_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if 'broadcast_photo' in context.user_data:
        context.user_data['saved_photo'] = context.user_data['broadcast_photo']
    
    context.user_data['broadcast_step'] = 'text'
    
    keyboard = [
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="broadcast_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await query.message.reply_text(
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n\n"
        "üí° _–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç_",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    try:
        await query.message.delete()
    except:
        pass

async def user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    global_stats = db.get_global_stats()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ Markdown
    stats_text = f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
    stats_text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {global_stats['unique_users']}\n"
    stats_text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {global_stats['active_users']}\n"
    stats_text += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {global_stats['unique_users'] - global_stats['active_users']}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º
    if global_stats['bot_stats']:
        stats_text += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º:\n"
        for bot_id, count in global_stats['bot_stats'].items():
            bot_name = bot_manager.data["bots"].get(bot_id, {}).get("name", bot_id)
            stats_text += f"‚Ä¢ {bot_name}: {count} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    recent_users = db.get_bot_users('main', only_active=False)[:5]
    if recent_users:
        stats_text += "\nüÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≥–ª–∞–≤–Ω—ã–π –±–æ—Ç):\n"
        for user in recent_users:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            first_name = user.get('first_name', '') or ''
            last_name = user.get('last_name', '') or ''
            name = f"{first_name} {last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = user.get('username')
            status = "üö´" if user.get('is_blocked') else "‚úÖ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if username:
                stats_text += f"{status} {name} - @{username}\n"
            else:
                stats_text += f"{status} {name} - –±–µ–∑ username\n"
    
    keyboard = [
        [InlineKeyboardButton("üì¢ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_start_main")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º", callback_data="bot_stats_menu")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="broadcast_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await query.edit_message_text(
        stats_text,
        reply_markup=reply_markup
    )

async def bot_stats_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç–∞–º"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    bots_list = bot_manager.get_bots_list()
    keyboard = []
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ Markdown
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º\n\n"
    
    for bot_id, bot_name, status in bots_list:
        try:
            stats = db.get_bot_stats(bot_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            stats = {'total': 0, 'active': 0, 'blocked': 0, 'with_username': 0, 'premium': 0}
        
        premium_percent = (stats['premium'] / stats['active'] * 100) if stats['active'] > 0 else 0
        
        text += f"ü§ñ {bot_name}\n"
        text += f"   ‚îî –í—Å–µ–≥–æ: {stats['total']}\n"
        text += f"   ‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}\n"
        text += f"   ‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {stats['blocked']}\n"
        text += f"   ‚îî –° username: {stats['with_username']}\n"
        text += f"   ‚îî ‚≠ê –ü—Ä–µ–º–∏—É–º: {stats['premium']} ({premium_percent:.1f}%)\n\n"
        
        if stats['total'] > 0:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìä {bot_name}",
                    callback_data=f"bot_detailed_stats_{bot_id}"
                )
            ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="user_stats")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await query.edit_message_text(
        text,
        reply_markup=reply_markup
    )

async def bot_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–æ—Ç—É"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º bot_id, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    bot_id = query.data[len("bot_detailed_stats_"):]
    bot_name = bot_manager.data["bots"].get(bot_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç")
    
    try:
        stats = db.get_bot_stats(bot_id)
        users = db.get_bot_users(bot_id, only_active=False)[:10]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_name}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="bot_stats_menu")
            ]])
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ Markdown
    premium_percent = (stats['premium'] / stats['active'] * 100) if stats['active'] > 0 else 0
    
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞: {bot_name}\n\n"
    text += f"üìà –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}\n"
    text += f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {stats['blocked']}\n"
    text += f"‚Ä¢ –° username: {stats['with_username']}\n"
    text += f"‚Ä¢ ‚≠ê –ü—Ä–µ–º–∏—É–º: {stats['premium']} ({premium_percent:.1f}%)\n\n"
    
    if users:
        text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user in users:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            first_name = user.get('first_name', '') or ''
            last_name = user.get('last_name', '') or ''
            name = f"{first_name} {last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = user.get('username')
            status = "üö´" if user.get('is_blocked') else "‚úÖ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if username:
                text += f"{status} {name} - @{username}\n"
            else:
                text += f"{status} {name} - ID: {user['user_id']}\n"
    
    keyboard = [
        [InlineKeyboardButton(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç {bot_name}", callback_data=f"broadcast_bot_{bot_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="bot_stats_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await query.edit_message_text(
        text,
        reply_markup=reply_markup
    )

async def ignore_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å"""
    query = update.callback_query
    await query.answer()
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å—Ç–∞—Ä—Ç—É
    context.user_data.clear()
    
    user = query.from_user
    
    if is_admin(user.id):
        keyboard = [[InlineKeyboardButton("üîß –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º username –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        main_bot_data = bot_manager.data["bots"].get("main", {})
        bot_username = main_bot_data.get("username")
        if bot_username:
            bot_display_name = f"@{bot_username}"
        else:
            bot_display_name = "–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        
        await query.edit_message_text(
            f"ü§ñ *{bot_display_name}*\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏!\n\n"
            "üîß _–î–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏_",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    else:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–¥–º–∏–Ω –∑–∞–¥–∞–ª –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        start_text = bot_manager.get_bot_text("main")
        try:
            html_text = markdown_to_html(start_text)
            await query.edit_message_text(
                html_text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å HTML –≤ back_to_start: {e}")
            try:
                await query.edit_message_text(
                    start_text,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True
                )
            except Exception:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await query.edit_message_text(
                    start_text,
                    disable_web_page_preview=True
                )

async def cleanup_old_forwarded_messages():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–∞–º—è—Ç–∏"""
    while True:
        try:
            await asyncio.sleep(1800)  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            
            current_time = datetime.now()
            messages_to_remove = []
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 12 —á–∞—Å–æ–≤ (—É–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è)
            for message_id, message_info in list(forwarded_messages.items()):
                if 'timestamp' in message_info:
                    message_time = message_info['timestamp']
                    if current_time - message_time > timedelta(hours=12):
                        messages_to_remove.append(message_id)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for message_id in messages_to_remove:
                if message_id in forwarded_messages:
                    del forwarded_messages[message_id]
            
            if messages_to_remove:
                logger.info(f"–û—á–∏—â–µ–Ω–æ {len(messages_to_remove)} —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–∞–º—è—Ç–∏")
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è
            if len(forwarded_messages) > MAX_FORWARDED_MESSAGES:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
                sorted_messages = sorted(
                    forwarded_messages.items(),
                    key=lambda x: x[1].get('timestamp', datetime.min)
                )
                to_remove = len(forwarded_messages) - MAX_FORWARDED_MESSAGES + 100
                for msg_id, _ in sorted_messages[:to_remove]:
                    del forwarded_messages[msg_id]
                logger.info(f"–û—á–∏—â–µ–Ω–æ {to_remove} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏: {e}")

async def restore_running_bots():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –±–æ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    running_bots_file = "running_bots.json"
    
    try:
        if os.path.exists(running_bots_file):
            with open(running_bots_file, 'r') as f:
                saved_running_bots = json.load(f)
                
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –±–æ—Ç—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {saved_running_bots}")
            
            # –í–ê–ñ–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            for bot_id in saved_running_bots:
                if bot_id != "main" and bot_id in [b[0] for b in bot_manager.get_bots_list()]:
                    token = bot_manager.get_bot_token(bot_id)
                    if token:
                        logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞ {bot_id}")
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ñ–î–ï–ú –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        success = await start_bot(bot_id, token)
                        if success:
                            logger.info(f"‚úÖ –ë–æ—Ç {bot_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ {bot_id}")
                        # –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏
                        await asyncio.sleep(20)
        else:
            logger.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–æ–≤: {e}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    for bot_id in list(active_bot_instances.keys()):
        try:
            if bot_id in active_bot_instances:
                bot_info = active_bot_instances[bot_id]
                app = bot_info['app']
                loop = bot_info['loop']
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º loop
                if not loop.is_closed():
                    try:
                        asyncio.run_coroutine_threadsafe(app.updater.stop(), loop)
                        asyncio.run_coroutine_threadsafe(app.stop(), loop)
                        asyncio.run_coroutine_threadsafe(app.shutdown(), loop)
                    except Exception as stop_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {stop_error}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_id}: {e}")
    
    active_bot_instances.clear()
    sys.exit(0)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        logger.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å webhook –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        webhook_cleared = False
        try:
            temp_app = Application.builder().token(MAIN_BOT_TOKEN).build()
            await temp_app.initialize()
            
            # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - —Å –æ—á–∏—Å—Ç–∫–æ–π webhook
            try:
                await temp_app.bot.delete_webhook(drop_pending_updates=True)
                logger.info("Webhook –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
                webhook_cleared = True
            except Exception as webhook_error:
                error_str = str(webhook_error).lower()
                if "429" in error_str or "flood" in error_str or "too many requests" in error_str:
                    logger.warning(f"–õ–∏–º–∏—Ç –Ω–∞ –æ—á–∏—Å—Ç–∫—É webhook –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞: {webhook_error}")
                    logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ webhook")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞: {webhook_error}")
            
            bot_info = await temp_app.bot.get_me()
            logger.info(f"–ì–ª–∞–≤–Ω—ã–π –±–æ—Ç: @{bot_info.username}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞
            if bot_info.username:
                bot_manager.data["bots"]["main"]["username"] = bot_info.username
                bot_manager.save_data()
                logger.info(f"Username –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: @{bot_info.username}")
            
            await temp_app.shutdown()
            await asyncio.sleep(1)
            
        except Exception as e:
            error_str = str(e).lower()
            
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ webhook
            if "429" in error_str or "flood" in error_str or "too many requests" in error_str:
                logger.warning("–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ webhook...")
                # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
                logger.info("–í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫...")
                await asyncio.sleep(5)
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    
            elif "conflict" in error_str:
                logger.error("‚ùå –ì–ª–∞–≤–Ω—ã–π –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ!")
                logger.error("–†–µ—à–µ–Ω–∏–µ: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω")
                sys.exit(1)
            else:
                logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        main_app = Application.builder().token(MAIN_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        main_app.add_handler(CommandHandler("start", start))
        main_app.add_handler(CommandHandler("admin", admin_command))
        main_app.add_handler(CommandHandler("dbcheck", check_database_command))
        main_app.add_handler(CommandHandler("panel", admin_panel))  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–∞–Ω–µ–ª–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        main_app.add_handler(CallbackQueryHandler(admin_panel, pattern="^admin_panel$"))
        main_app.add_handler(CallbackQueryHandler(manage_bots, pattern="^manage_bots$"))
        main_app.add_handler(CallbackQueryHandler(create_new_bot, pattern="^create_new_bot$"))
        main_app.add_handler(CallbackQueryHandler(retry_token, pattern="^retry_token$"))
        main_app.add_handler(CallbackQueryHandler(control_bots, pattern="^control_bots$"))
        main_app.add_handler(CallbackQueryHandler(control_single_bot, pattern="^control_bot_"))
        main_app.add_handler(CallbackQueryHandler(start_bot_handler, pattern="^start_bot_"))
        main_app.add_handler(CallbackQueryHandler(stop_bot_handler, pattern="^stop_bot_"))
        main_app.add_handler(CallbackQueryHandler(delete_bot_handler, pattern="^delete_bot_"))
        main_app.add_handler(CallbackQueryHandler(confirm_delete_bot, pattern="^confirm_delete_"))
        main_app.add_handler(CallbackQueryHandler(edit_texts, pattern="^edit_texts$"))
        main_app.add_handler(CallbackQueryHandler(edit_bot_text, pattern="^edit_bot_"))
        main_app.add_handler(CallbackQueryHandler(test_bot_text, pattern="^test_bot_"))
        main_app.add_handler(CallbackQueryHandler(stats, pattern="^stats$"))
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
        main_app.add_handler(CallbackQueryHandler(manage_admins, pattern="^manage_admins$"))
        main_app.add_handler(CallbackQueryHandler(add_admin, pattern="^add_admin$"))
        main_app.add_handler(CallbackQueryHandler(remove_admin, pattern="^remove_admin$"))
        main_app.add_handler(CallbackQueryHandler(confirm_remove_admin, pattern="^confirm_remove_admin_"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        main_app.add_handler(CallbackQueryHandler(broadcast_menu, pattern="^broadcast_menu$"))
        main_app.add_handler(CallbackQueryHandler(lambda u, c: broadcast_menu(u, c, int(u.callback_query.data.split('_')[-1])), pattern="^broadcast_page_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ - –≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫!
        main_app.add_handler(CallbackQueryHandler(broadcast_start, pattern="^broadcast_start_main$"))
        main_app.add_handler(CallbackQueryHandler(broadcast_start, pattern="^broadcast_bot_"))  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        
        main_app.add_handler(CallbackQueryHandler(broadcast_send, pattern="^broadcast_send$"))
        main_app.add_handler(CallbackQueryHandler(stop_broadcast, pattern="^stop_broadcast$"))
        main_app.add_handler(CallbackQueryHandler(broadcast_cancel, pattern="^broadcast_cancel$"))
        main_app.add_handler(CallbackQueryHandler(broadcast_cancel_photo, pattern="^broadcast_cancel_photo$"))
        main_app.add_handler(CallbackQueryHandler(broadcast_edit, pattern="^broadcast_edit$"))
        main_app.add_handler(CallbackQueryHandler(broadcast_edit_photo, pattern="^broadcast_edit_photo$"))
        main_app.add_handler(CallbackQueryHandler(user_stats, pattern="^user_stats$"))
        main_app.add_handler(CallbackQueryHandler(bot_stats_menu, pattern="^bot_stats_menu$"))
        main_app.add_handler(CallbackQueryHandler(bot_detailed_stats, pattern="^bot_detailed_stats_"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ç–∫–µ
        main_app.add_handler(CallbackQueryHandler(markdown_help, pattern="^markdown_help$"))
        main_app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
        main_app.add_handler(CallbackQueryHandler(ignore_callback, pattern="^ignore$"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback_data
        async def debug_unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
            query = update.callback_query
            logger.warning(f"Unknown callback_data received: {query.data}")
            await query.answer(f"Debug: callback_data = {query.data}", show_alert=True)
        
        # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ callback
        main_app.add_handler(CallbackQueryHandler(debug_unknown_callback))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        main_app.add_handler(MessageHandler(filters.PHOTO, handle_photo_message))
        main_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await main_app.initialize()
        await main_app.start()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        logger.info("–ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤...")
        await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        await restore_running_bots()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏
        asyncio.create_task(cleanup_old_forwarded_messages())
        
        logger.info("–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await main_app.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        
        # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
        stop_event = asyncio.Event()
        await stop_event.wait()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –±–æ—Ç–æ–≤
            for bot_id in list(active_bot_instances.keys()):
                await stop_bot(bot_id)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
            await main_app.updater.stop()
            await main_app.stop()
            await main_app.shutdown()
            
            logger.info("–í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

if __name__ == '__main__':
    import argparse
    
    # –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='Telegram Bot Manager')
    parser.add_argument('--force', action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã')
    parser.add_argument('--ignore-conflicts', action='store_true',
                       help='–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
    parser.add_argument('--silent', action='store_true',
                       help='–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤')
    args = parser.parse_args()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å
        try:
            import psutil
            current_pid = os.getpid()
            conflicting_processes = []
            
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if proc.info['pid'] != current_pid and proc.info['name'] and 'python' in proc.info['name'].lower():
                        cmdline = proc.info.get('cmdline', [])
                        if cmdline and any('main.py' in arg for arg in cmdline):
                            conflicting_processes.append({
                                'pid': proc.info['pid'],
                                'name': proc.info['name'],
                                'cmdline': ' '.join(cmdline[:3]) if len(cmdline) > 3 else ' '.join(cmdline)
                            })
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            if conflicting_processes:
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {len(conflicting_processes)} —à—Ç.")
                
                # –í —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ –∏–ª–∏ —Å —Ñ–ª–∞–≥–æ–º --force –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                if args.silent or args.force:
                    logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
                    for proc_info in conflicting_processes:
                        try:
                            proc = psutil.Process(proc_info['pid'])
                            proc.terminate()
                            logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {proc_info['pid']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {proc_info['pid']}: {e}")
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    import time
                    time.sleep(3)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                    still_running = []
                    for proc_info in conflicting_processes:
                        try:
                            if psutil.pid_exists(proc_info['pid']):
                                proc = psutil.Process(proc_info['pid'])
                                proc.kill()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                                logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {proc_info['pid']} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                        except:
                            pass
                    
                    logger.info("–ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫...")
                
                # –ï—Å–ª–∏ —Ñ–ª–∞–≥ --ignore-conflicts, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                elif args.ignore_conflicts:
                    logger.warning("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
                # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                else:
                    print("\n" + "="*60)
                    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã!")
                    print("="*60)
                    for proc in conflicting_processes:
                        print(f"PID: {proc['pid']} | –ü—Ä–æ—Ü–µ—Å—Å: {proc['name']}")
                    print("-"*60)
                    print("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:")
                    print("  python main.py --force           # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã")
                    print("  python main.py --ignore-conflicts # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã")
                    print("  python main.py --silent          # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
                    print("\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã")
                    
                    try:
                        input()
                        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                    except KeyboardInterrupt:
                        print("\n–ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
                        sys.exit(0)
                    
        except ImportError:
            logger.info("–ú–æ–¥—É–ª—å psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.")
            if not args.silent:
                logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ psutil –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: pip install psutil")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (silent={args.silent}, force={args.force}, ignore_conflicts={args.ignore_conflicts})")
        asyncio.run(main())
        
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if not args.silent:
            logger.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
    finally:
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        active_bot_instances.clear()
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
